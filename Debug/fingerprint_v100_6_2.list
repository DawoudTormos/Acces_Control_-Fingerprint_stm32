
fingerprint_v100_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009460  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800956c  0800956c  0000a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e8  080097e8  0000b184  2**0
                  CONTENTS
  4 .ARM          00000008  080097e8  080097e8  0000a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f0  080097f0  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f0  080097f0  0000a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f4  080097f4  0000a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080097f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000184  0800997c  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001474  0800997c  0000b474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001150b  00000000  00000000  0000b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000336d  00000000  00000000  0001c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5a  00000000  00000000  000207f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e74  00000000  00000000  00021252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ee8  00000000  00000000  0003b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bf5  00000000  00000000  0004dfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000d5be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d9278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08009554 	.word	0x08009554

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08009554 	.word	0x08009554

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <fp_init>:
uint8_t fp_detected = 0;

static void MX_USART1_UART_Init(void);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

void fp_init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000160:	f000 fb1a 	bl	8000798 <MX_USART1_UART_Init>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <PS_ValidTempleteNum>:

	int conf_code = decode_rx_frame(rx_data, (len + 3));

	return conf_code;
}
uint16_t PS_ValidTempleteNum(void) {
 8000168:	b580      	push	{r7, lr}
 800016a:	b084      	sub	sp, #16
 800016c:	af00      	add	r7, sp, #0
	uint8_t data[1];
	uint8_t rx_data[2];

	write_directive_command(CMD_PKG, PS_READ_VALID_TEMP, PS_READ_VALID_TEMP_LEN,
 800016e:	f107 0308 	add.w	r3, r7, #8
 8000172:	2203      	movs	r2, #3
 8000174:	211d      	movs	r1, #29
 8000176:	2001      	movs	r0, #1
 8000178:	f000 f814 	bl	80001a4 <write_directive_command>
			data);

	int conf_code = decode_rx_frame(rx_data, 5);
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	2105      	movs	r1, #5
 8000180:	4618      	mov	r0, r3
 8000182:	f000 f8bb 	bl	80002fc <decode_rx_frame>
 8000186:	60f8      	str	r0, [r7, #12]
	uint16_t valid_temp_num = rx_data[0] << 8 | rx_data[1];
 8000188:	793b      	ldrb	r3, [r7, #4]
 800018a:	021b      	lsls	r3, r3, #8
 800018c:	b21a      	sxth	r2, r3
 800018e:	797b      	ldrb	r3, [r7, #5]
 8000190:	b21b      	sxth	r3, r3
 8000192:	4313      	orrs	r3, r2
 8000194:	b21b      	sxth	r3, r3
 8000196:	817b      	strh	r3, [r7, #10]

	return valid_temp_num;
 8000198:	897b      	ldrh	r3, [r7, #10]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <write_directive_command>:

void write_directive_command(uint8_t pkg_type, uint8_t regNb, uint16_t len,
		uint8_t *data) {
 80001a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001a8:	b087      	sub	sp, #28
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	603b      	str	r3, [r7, #0]
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	460b      	mov	r3, r1
 80001b4:	71bb      	strb	r3, [r7, #6]
 80001b6:	4613      	mov	r3, r2
 80001b8:	80bb      	strh	r3, [r7, #4]
 80001ba:	466b      	mov	r3, sp
 80001bc:	461e      	mov	r6, r3
	uint8_t temp_tx[9 + len]; // preamble: 2 bytes, header: 4 bytes, pckg logo: 1 byte, len: 2 bytes --> sum = 9 bytes
 80001be:	88bb      	ldrh	r3, [r7, #4]
 80001c0:	f103 0109 	add.w	r1, r3, #9
 80001c4:	1e4b      	subs	r3, r1, #1
 80001c6:	613b      	str	r3, [r7, #16]
 80001c8:	460a      	mov	r2, r1
 80001ca:	2300      	movs	r3, #0
 80001cc:	4690      	mov	r8, r2
 80001ce:	4699      	mov	r9, r3
 80001d0:	f04f 0200 	mov.w	r2, #0
 80001d4:	f04f 0300 	mov.w	r3, #0
 80001d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80001dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80001e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80001e4:	460a      	mov	r2, r1
 80001e6:	2300      	movs	r3, #0
 80001e8:	4614      	mov	r4, r2
 80001ea:	461d      	mov	r5, r3
 80001ec:	f04f 0200 	mov.w	r2, #0
 80001f0:	f04f 0300 	mov.w	r3, #0
 80001f4:	00eb      	lsls	r3, r5, #3
 80001f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80001fa:	00e2      	lsls	r2, r4, #3
 80001fc:	460b      	mov	r3, r1
 80001fe:	3307      	adds	r3, #7
 8000200:	08db      	lsrs	r3, r3, #3
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	ebad 0d03 	sub.w	sp, sp, r3
 8000208:	466b      	mov	r3, sp
 800020a:	3300      	adds	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
	uint16_t checksum = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	82fb      	strh	r3, [r7, #22]
	uint8_t data_count = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	757b      	strb	r3, [r7, #21]

	temp_tx[0] = HEADER >> 8;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	22ef      	movs	r2, #239	@ 0xef
 800021a:	701a      	strb	r2, [r3, #0]
	temp_tx[1] = HEADER;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2201      	movs	r2, #1
 8000220:	705a      	strb	r2, [r3, #1]

	temp_tx[2] = DEVICE_ADDRESS >> 24;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	22ff      	movs	r2, #255	@ 0xff
 8000226:	709a      	strb	r2, [r3, #2]
	temp_tx[3] = DEVICE_ADDRESS >> 16;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	22ff      	movs	r2, #255	@ 0xff
 800022c:	70da      	strb	r2, [r3, #3]
	temp_tx[4] = DEVICE_ADDRESS >> 8;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	22ff      	movs	r2, #255	@ 0xff
 8000232:	711a      	strb	r2, [r3, #4]
	temp_tx[5] = DEVICE_ADDRESS;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	22ff      	movs	r2, #255	@ 0xff
 8000238:	715a      	strb	r2, [r3, #5]

	temp_tx[6] = pkg_type;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	719a      	strb	r2, [r3, #6]

	temp_tx[7] = len >> 8;
 8000240:	88bb      	ldrh	r3, [r7, #4]
 8000242:	0a1b      	lsrs	r3, r3, #8
 8000244:	b29b      	uxth	r3, r3
 8000246:	b2da      	uxtb	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	71da      	strb	r2, [r3, #7]
	temp_tx[8] = len;
 800024c:	88bb      	ldrh	r3, [r7, #4]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	721a      	strb	r2, [r3, #8]

	temp_tx[9] = regNb;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	79ba      	ldrb	r2, [r7, #6]
 8000258:	725a      	strb	r2, [r3, #9]

	checksum += pkg_type + len + regNb;
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	b29a      	uxth	r2, r3
 800025e:	88bb      	ldrh	r3, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	b29a      	uxth	r2, r3
 8000264:	79bb      	ldrb	r3, [r7, #6]
 8000266:	b29b      	uxth	r3, r3
 8000268:	4413      	add	r3, r2
 800026a:	b29a      	uxth	r2, r3
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	4413      	add	r3, r2
 8000270:	82fb      	strh	r3, [r7, #22]

	// if the directive command contains some parameters other than
	// checksum and instruction code
	if (len > 3) {
 8000272:	88bb      	ldrh	r3, [r7, #4]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d927      	bls.n	80002c8 <write_directive_command+0x124>
		while (data_count < (len - 3)) {
 8000278:	e012      	b.n	80002a0 <write_directive_command+0xfc>
			temp_tx[10 + data_count] = data[data_count];
 800027a:	7d7b      	ldrb	r3, [r7, #21]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	441a      	add	r2, r3
 8000280:	7d7b      	ldrb	r3, [r7, #21]
 8000282:	330a      	adds	r3, #10
 8000284:	7810      	ldrb	r0, [r2, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	54d0      	strb	r0, [r2, r3]
			checksum += data[data_count];
 800028a:	7d7b      	ldrb	r3, [r7, #21]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	8afb      	ldrh	r3, [r7, #22]
 8000296:	4413      	add	r3, r2
 8000298:	82fb      	strh	r3, [r7, #22]

			data_count++;
 800029a:	7d7b      	ldrb	r3, [r7, #21]
 800029c:	3301      	adds	r3, #1
 800029e:	757b      	strb	r3, [r7, #21]
		while (data_count < (len - 3)) {
 80002a0:	7d7a      	ldrb	r2, [r7, #21]
 80002a2:	88bb      	ldrh	r3, [r7, #4]
 80002a4:	3b03      	subs	r3, #3
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbe7      	blt.n	800027a <write_directive_command+0xd6>
		}

		temp_tx[10 + data_count] = (checksum >> 8) & 0xFF;
 80002aa:	8afb      	ldrh	r3, [r7, #22]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	7d7b      	ldrb	r3, [r7, #21]
 80002b2:	330a      	adds	r3, #10
 80002b4:	b2d0      	uxtb	r0, r2
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	54d0      	strb	r0, [r2, r3]
		temp_tx[11 + data_count] = (checksum & 0xFF);
 80002ba:	7d7b      	ldrb	r3, [r7, #21]
 80002bc:	330b      	adds	r3, #11
 80002be:	8afa      	ldrh	r2, [r7, #22]
 80002c0:	b2d0      	uxtb	r0, r2
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	54d0      	strb	r0, [r2, r3]
 80002c6:	e009      	b.n	80002dc <write_directive_command+0x138>

	} else {
		temp_tx[10] = checksum >> 8;
 80002c8:	8afb      	ldrh	r3, [r7, #22]
 80002ca:	0a1b      	lsrs	r3, r3, #8
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	729a      	strb	r2, [r3, #10]
		temp_tx[11] = checksum;
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	72da      	strb	r2, [r3, #11]
	}

	HAL_UART_Transmit(&fp, temp_tx, sizeof(temp_tx), 1000);
 80002dc:	b28a      	uxth	r2, r1
 80002de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <write_directive_command+0x154>)
 80002e6:	f003 feb7 	bl	8004058 <HAL_UART_Transmit>
 80002ea:	46b5      	mov	sp, r6
	//HAL_Delay(10);
}
 80002ec:	bf00      	nop
 80002ee:	371c      	adds	r7, #28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002f6:	bf00      	nop
 80002f8:	200001a0 	.word	0x200001a0

080002fc <decode_rx_frame>:
int decode_rx_frame(uint8_t *rx_data, uint8_t rx_data_len) {
 80002fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000300:	b08a      	sub	sp, #40	@ 0x28
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	466b      	mov	r3, sp
 800030c:	469a      	mov	sl, r3

	uint8_t temp_rx[9 + rx_data_len];  // buffer to store
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	f103 0609 	add.w	r6, r3, #9
 8000314:	1e73      	subs	r3, r6, #1
 8000316:	61fb      	str	r3, [r7, #28]
 8000318:	4632      	mov	r2, r6
 800031a:	2300      	movs	r3, #0
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	f04f 0200 	mov.w	r2, #0
 8000324:	f04f 0300 	mov.w	r3, #0
 8000328:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800032c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000330:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000334:	4632      	mov	r2, r6
 8000336:	2300      	movs	r3, #0
 8000338:	4614      	mov	r4, r2
 800033a:	461d      	mov	r5, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	00eb      	lsls	r3, r5, #3
 8000346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800034a:	00e2      	lsls	r2, r4, #3
 800034c:	4633      	mov	r3, r6
 800034e:	3307      	adds	r3, #7
 8000350:	08db      	lsrs	r3, r3, #3
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	ebad 0d03 	sub.w	sp, sp, r3
 8000358:	466b      	mov	r3, sp
 800035a:	3300      	adds	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
	uint8_t pkg_logo, confirm_code;
	uint16_t header, packet_len, checksum;
	uint32_t dev_address;
	uint8_t data_count = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	const char *c = "500";
 8000364:	4b92      	ldr	r3, [pc, #584]	@ (80005b0 <decode_rx_frame+0x2b4>)
 8000366:	623b      	str	r3, [r7, #32]

	memset(temp_rx, '\0', sizeof(temp_rx));
 8000368:	4633      	mov	r3, r6
 800036a:	461a      	mov	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	69b8      	ldr	r0, [r7, #24]
 8000370:	f009 f8c4 	bl	80094fc <memset>
	HAL_StatusTypeDef ret = HAL_UART_Receive(&fp, temp_rx, sizeof(temp_rx),
 8000374:	b2b2      	uxth	r2, r6
 8000376:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800037a:	69b9      	ldr	r1, [r7, #24]
 800037c:	488d      	ldr	r0, [pc, #564]	@ (80005b4 <decode_rx_frame+0x2b8>)
 800037e:	f003 feee 	bl	800415e <HAL_UART_Receive>
 8000382:	4603      	mov	r3, r0
 8000384:	75fb      	strb	r3, [r7, #23]
			500);

	header = temp_rx[0] << 8 | temp_rx[1];
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	b21a      	sxth	r2, r3
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	785b      	ldrb	r3, [r3, #1]
 8000392:	b21b      	sxth	r3, r3
 8000394:	4313      	orrs	r3, r2
 8000396:	b21b      	sxth	r3, r3
 8000398:	82bb      	strh	r3, [r7, #20]
	if (header != HEADER) {
 800039a:	8abb      	ldrh	r3, [r7, #20]
 800039c:	f64e 7201 	movw	r2, #61185	@ 0xef01
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d001      	beq.n	80003a8 <decode_rx_frame+0xac>
		c = "invalid header";
 80003a4:	4b84      	ldr	r3, [pc, #528]	@ (80005b8 <decode_rx_frame+0x2bc>)
 80003a6:	623b      	str	r3, [r7, #32]
	}

	pkg_logo = temp_rx[6];
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	799b      	ldrb	r3, [r3, #6]
 80003ac:	74fb      	strb	r3, [r7, #19]
	packet_len = (temp_rx[7] << 8) | temp_rx[8];
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	021b      	lsls	r3, r3, #8
 80003b4:	b21a      	sxth	r2, r3
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	7a1b      	ldrb	r3, [r3, #8]
 80003ba:	b21b      	sxth	r3, r3
 80003bc:	4313      	orrs	r3, r2
 80003be:	b21b      	sxth	r3, r3
 80003c0:	823b      	strh	r3, [r7, #16]
	confirm_code = temp_rx[9];
 80003c2:	69bb      	ldr	r3, [r7, #24]
 80003c4:	7a5b      	ldrb	r3, [r3, #9]
 80003c6:	73fb      	strb	r3, [r7, #15]

	if (rx_data_len > 3) {
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d927      	bls.n	800041e <decode_rx_frame+0x122>
		while (data_count < (rx_data_len - 3)) {
 80003ce:	e00f      	b.n	80003f0 <decode_rx_frame+0xf4>
			rx_data[data_count] = temp_rx[10 + data_count];
 80003d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003d4:	f103 020a 	add.w	r2, r3, #10
 80003d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003dc:	6879      	ldr	r1, [r7, #4]
 80003de:	440b      	add	r3, r1
 80003e0:	69b9      	ldr	r1, [r7, #24]
 80003e2:	5c8a      	ldrb	r2, [r1, r2]
 80003e4:	701a      	strb	r2, [r3, #0]
			data_count++;
 80003e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003ea:	3301      	adds	r3, #1
 80003ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		while (data_count < (rx_data_len - 3)) {
 80003f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	3b03      	subs	r3, #3
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbe9      	blt.n	80003d0 <decode_rx_frame+0xd4>
		}
		checksum = (temp_rx[10 + data_count] << 8) | temp_rx[11 + data_count];
 80003fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000400:	330a      	adds	r3, #10
 8000402:	69ba      	ldr	r2, [r7, #24]
 8000404:	5cd3      	ldrb	r3, [r2, r3]
 8000406:	021b      	lsls	r3, r3, #8
 8000408:	b21a      	sxth	r2, r3
 800040a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800040e:	330b      	adds	r3, #11
 8000410:	69b9      	ldr	r1, [r7, #24]
 8000412:	5ccb      	ldrb	r3, [r1, r3]
 8000414:	b21b      	sxth	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b21b      	sxth	r3, r3
 800041a:	81bb      	strh	r3, [r7, #12]
 800041c:	e009      	b.n	8000432 <decode_rx_frame+0x136>

	} else {
		checksum = (temp_rx[10] << 8) | temp_rx[11];
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	7a9b      	ldrb	r3, [r3, #10]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	b21a      	sxth	r2, r3
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	7adb      	ldrb	r3, [r3, #11]
 800042a:	b21b      	sxth	r3, r3
 800042c:	4313      	orrs	r3, r2
 800042e:	b21b      	sxth	r3, r3
 8000430:	81bb      	strh	r3, [r7, #12]
	}

	switch (confirm_code) {
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	2b35      	cmp	r3, #53	@ 0x35
 8000436:	f200 80a2 	bhi.w	800057e <decode_rx_frame+0x282>
 800043a:	a201      	add	r2, pc, #4	@ (adr r2, 8000440 <decode_rx_frame+0x144>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000519 	.word	0x08000519
 8000444:	0800051f 	.word	0x0800051f
 8000448:	08000525 	.word	0x08000525
 800044c:	0800052b 	.word	0x0800052b
 8000450:	0800057f 	.word	0x0800057f
 8000454:	0800057f 	.word	0x0800057f
 8000458:	0800057f 	.word	0x0800057f
 800045c:	08000531 	.word	0x08000531
 8000460:	08000537 	.word	0x08000537
 8000464:	0800057f 	.word	0x0800057f
 8000468:	0800053d 	.word	0x0800053d
 800046c:	08000543 	.word	0x08000543
 8000470:	0800057f 	.word	0x0800057f
 8000474:	0800057f 	.word	0x0800057f
 8000478:	0800057f 	.word	0x0800057f
 800047c:	0800057f 	.word	0x0800057f
 8000480:	0800057f 	.word	0x0800057f
 8000484:	0800057f 	.word	0x0800057f
 8000488:	0800057f 	.word	0x0800057f
 800048c:	0800057f 	.word	0x0800057f
 8000490:	0800057f 	.word	0x0800057f
 8000494:	0800057f 	.word	0x0800057f
 8000498:	0800057f 	.word	0x0800057f
 800049c:	0800057f 	.word	0x0800057f
 80004a0:	08000549 	.word	0x08000549
 80004a4:	0800057f 	.word	0x0800057f
 80004a8:	0800057f 	.word	0x0800057f
 80004ac:	0800057f 	.word	0x0800057f
 80004b0:	0800057f 	.word	0x0800057f
 80004b4:	0800057f 	.word	0x0800057f
 80004b8:	0800057f 	.word	0x0800057f
 80004bc:	0800054f 	.word	0x0800054f
 80004c0:	0800057f 	.word	0x0800057f
 80004c4:	0800057f 	.word	0x0800057f
 80004c8:	08000555 	.word	0x08000555
 80004cc:	0800055b 	.word	0x0800055b
 80004d0:	0800057f 	.word	0x0800057f
 80004d4:	08000561 	.word	0x08000561
 80004d8:	08000567 	.word	0x08000567
 80004dc:	0800056d 	.word	0x0800056d
 80004e0:	0800057f 	.word	0x0800057f
 80004e4:	0800057f 	.word	0x0800057f
 80004e8:	0800057f 	.word	0x0800057f
 80004ec:	0800057f 	.word	0x0800057f
 80004f0:	0800057f 	.word	0x0800057f
 80004f4:	0800057f 	.word	0x0800057f
 80004f8:	0800057f 	.word	0x0800057f
 80004fc:	0800057f 	.word	0x0800057f
 8000500:	0800057f 	.word	0x0800057f
 8000504:	08000573 	.word	0x08000573
 8000508:	0800057f 	.word	0x0800057f
 800050c:	0800057f 	.word	0x0800057f
 8000510:	0800057f 	.word	0x0800057f
 8000514:	08000579 	.word	0x08000579
	case CONF_INSTRUCTION_OK:
		c = "Instruction is Performed";
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <decode_rx_frame+0x2c0>)
 800051a:	623b      	str	r3, [r7, #32]
		break;
 800051c:	e02f      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_PACKET_RECEIVE_ERROR:
		c = "Error receiving the package";
 800051e:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <decode_rx_frame+0x2c4>)
 8000520:	623b      	str	r3, [r7, #32]
		break;
 8000522:	e02c      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_NO_FINGER_DETECTED:
		c = "No finger on the sensor";
 8000524:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <decode_rx_frame+0x2c8>)
 8000526:	623b      	str	r3, [r7, #32]
		break;
 8000528:	e029      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FINGERPRINT_IMAGE_INPUT_FAIL:
		c = "Image input fails";
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <decode_rx_frame+0x2cc>)
 800052c:	623b      	str	r3, [r7, #32]
		break;
 800052e:	e026      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FINGERPRINT_TOO_FEW_FEATURE_POINTS:
		c = "Failed to generate features";
 8000530:	4b26      	ldr	r3, [pc, #152]	@ (80005cc <decode_rx_frame+0x2d0>)
 8000532:	623b      	str	r3, [r7, #32]
		break;
 8000534:	e023      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FINGERPRINT_MISMATCH:
		c = "Fingerprint Mismatch";
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <decode_rx_frame+0x2d4>)
 8000538:	623b      	str	r3, [r7, #32]
		break;
 800053a:	e020      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FEATURE_MERGE_FAIL:
		c = "Failed to merge templates";
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <decode_rx_frame+0x2d8>)
 800053e:	623b      	str	r3, [r7, #32]
		break;
 8000540:	e01d      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_ADDRESS_OUTSIDE_LIBRARY:
		c = "ID number out of range";
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <decode_rx_frame+0x2dc>)
 8000544:	623b      	str	r3, [r7, #32]
		break;
 8000546:	e01a      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_READ_WRITE_FLASH_ERROR:
		c = "Error in reading and writing the FLASH";
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <decode_rx_frame+0x2e0>)
 800054a:	623b      	str	r3, [r7, #32]
		break;
 800054c:	e017      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FINGERPRINT_LIBRARY_FULL:
		c = "The fingerprint library is full";
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <decode_rx_frame+0x2e4>)
 8000550:	623b      	str	r3, [r7, #32]
		break;
 8000552:	e014      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_TEMPLATE_NOT_EMPTY:
		c = "Fingerprint template is not empty";
 8000554:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <decode_rx_frame+0x2e8>)
 8000556:	623b      	str	r3, [r7, #32]
		break;
 8000558:	e011      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_TEMPLATE_EMPTY:
		c = "Fingerprint template is empty";
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <decode_rx_frame+0x2ec>)
 800055c:	623b      	str	r3, [r7, #32]
		break;
 800055e:	e00e      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_INCORRECT_ENTRY_TIMES:
		c = "Entry times are set incorrect";
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <decode_rx_frame+0x2f0>)
 8000562:	623b      	str	r3, [r7, #32]
		break;
 8000564:	e00b      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_OVERTIME:
		c = "Overtime";
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <decode_rx_frame+0x2f4>)
 8000568:	623b      	str	r3, [r7, #32]
		break;
 800056a:	e008      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_ALREADY_EXISTS:
		c = "The fingerprint already exists";
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <decode_rx_frame+0x2f8>)
 800056e:	623b      	str	r3, [r7, #32]
		break;
 8000570:	e005      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_FUNCTIONALITY_MISMATCH:
		c = "The function does not match with the encryption level";
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <decode_rx_frame+0x2fc>)
 8000574:	623b      	str	r3, [r7, #32]
		break;
 8000576:	e002      	b.n	800057e <decode_rx_frame+0x282>

	case CONF_ILLEGAL_DATA:
		c = "Illegal data";
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <decode_rx_frame+0x300>)
 800057a:	623b      	str	r3, [r7, #32]
		break;
 800057c:	bf00      	nop
	}
	CDC_Transmit_FS(temp_rx, sizeof(temp_rx));
 800057e:	b2b3      	uxth	r3, r6
 8000580:	4619      	mov	r1, r3
 8000582:	69b8      	ldr	r0, [r7, #24]
 8000584:	f008 fbdc 	bl	8008d40 <CDC_Transmit_FS>
	HAL_Delay(50);
 8000588:	2032      	movs	r0, #50	@ 0x32
 800058a:	f000 ff19 	bl	80013c0 <HAL_Delay>
	CDC_Transmit_FS(c, strlen(c));
 800058e:	6a38      	ldr	r0, [r7, #32]
 8000590:	f7ff fddc 	bl	800014c <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29b      	uxth	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	6a38      	ldr	r0, [r7, #32]
 800059c:	f008 fbd0 	bl	8008d40 <CDC_Transmit_FS>

	return confirm_code;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	46d5      	mov	sp, sl
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3728      	adds	r7, #40	@ 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	bf00      	nop
 80005b0:	0800956c 	.word	0x0800956c
 80005b4:	200001a0 	.word	0x200001a0
 80005b8:	08009570 	.word	0x08009570
 80005bc:	08009580 	.word	0x08009580
 80005c0:	0800959c 	.word	0x0800959c
 80005c4:	080095b8 	.word	0x080095b8
 80005c8:	080095d0 	.word	0x080095d0
 80005cc:	080095e4 	.word	0x080095e4
 80005d0:	08009600 	.word	0x08009600
 80005d4:	08009618 	.word	0x08009618
 80005d8:	08009634 	.word	0x08009634
 80005dc:	0800964c 	.word	0x0800964c
 80005e0:	08009674 	.word	0x08009674
 80005e4:	08009694 	.word	0x08009694
 80005e8:	080096b8 	.word	0x080096b8
 80005ec:	080096d8 	.word	0x080096d8
 80005f0:	080096f8 	.word	0x080096f8
 80005f4:	08009704 	.word	0x08009704
 80005f8:	08009724 	.word	0x08009724
 80005fc:	0800975c 	.word	0x0800975c

08000600 <PS_AutoEnroll>:

uint32_t PS_AutoEnroll(uint16_t id_nb, uint8_t entry_times, uint16_t parameters) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	717b      	strb	r3, [r7, #5]
 800060e:	4613      	mov	r3, r2
 8000610:	807b      	strh	r3, [r7, #2]
	uint8_t data[5];
	uint8_t rx_data[2];

	data[0] = id_nb >> 8;
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	743b      	strb	r3, [r7, #16]
	data[1] = id_nb;
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	747b      	strb	r3, [r7, #17]
	data[2] = entry_times;
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	74bb      	strb	r3, [r7, #18]
	data[3] = parameters >> 8;
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	b29b      	uxth	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	74fb      	strb	r3, [r7, #19]
	data[4] = parameters;
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	753b      	strb	r3, [r7, #20]

	write_directive_command(CMD_PKG, PS_AUTO_ENROLL, PS_AUTO_ENROLL_LEN, data);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2208      	movs	r2, #8
 800063c:	2131      	movs	r1, #49	@ 0x31
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fdb0 	bl	80001a4 <write_directive_command>

	int conf_code = decode_rx_frame(rx_data, 5);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe56 	bl	80002fc <decode_rx_frame>
 8000650:	61f8      	str	r0, [r7, #28]
	uint32_t params = conf_code << 16 | rx_data[0] << 8 | rx_data[1];
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	041a      	lsls	r2, r3, #16
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	4313      	orrs	r3, r2
 800065c:	7b7a      	ldrb	r2, [r7, #13]
 800065e:	4313      	orrs	r3, r2
 8000660:	61bb      	str	r3, [r7, #24]

	memset(rx_data, '\0', sizeof(rx_data));
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2202      	movs	r2, #2
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f008 ff46 	bl	80094fc <memset>
	return params;
 8000670:	69bb      	ldr	r3, [r7, #24]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <PS_AutoIdentify>:
uint32_t PS_AutoIdentify(uint16_t id_nb, uint8_t score_grade) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b088      	sub	sp, #32
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	460a      	mov	r2, r1
 8000684:	80fb      	strh	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]
	uint8_t data[5];
	uint8_t rx_data[5];

	data[0] = score_grade;
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	743b      	strb	r3, [r7, #16]
	data[1] = id_nb >> 8;
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29b      	uxth	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	747b      	strb	r3, [r7, #17]
	data[2] = id_nb;
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	74bb      	strb	r3, [r7, #18]
	data[3] = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	74fb      	strb	r3, [r7, #19]
	data[4] = 0x07;
 80006a2:	2307      	movs	r3, #7
 80006a4:	753b      	strb	r3, [r7, #20]

	write_directive_command(CMD_PKG, PS_AUTO_IDENT, PS_AUTO_IDENT_LEN, data);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2208      	movs	r2, #8
 80006ac:	2132      	movs	r1, #50	@ 0x32
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff fd78 	bl	80001a4 <write_directive_command>
	int conf_code = decode_rx_frame(rx_data, 8);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2108      	movs	r1, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe1e 	bl	80002fc <decode_rx_frame>
 80006c0:	61f8      	str	r0, [r7, #28]

	uint32_t param = conf_code << 24 | rx_data[0] << 16 | rx_data[3] << 8
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	061a      	lsls	r2, r3, #24
 80006c6:	7a3b      	ldrb	r3, [r7, #8]
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	431a      	orrs	r2, r3
 80006cc:	7afb      	ldrb	r3, [r7, #11]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	4313      	orrs	r3, r2
			| rx_data[4];
 80006d2:	7b3a      	ldrb	r2, [r7, #12]
 80006d4:	4313      	orrs	r3, r2
	uint32_t param = conf_code << 24 | rx_data[0] << 16 | rx_data[3] << 8
 80006d6:	61bb      	str	r3, [r7, #24]

	memset(rx_data, '\0', sizeof(rx_data));
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2205      	movs	r2, #5
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 ff0b 	bl	80094fc <memset>
	return param;
 80006e6:	69bb      	ldr	r3, [r7, #24]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <PS_GetImage>:

int PS_GetImage(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
	uint8_t data[1];

	write_directive_command(CMD_PKG, PS_GET_IMG, PS_GET_IMG_PKT_LEN, data);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2203      	movs	r2, #3
 80006fc:	2101      	movs	r1, #1
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff fd50 	bl	80001a4 <write_directive_command>

	uint8_t rx_data[1];
	int conf_code = decode_rx_frame(rx_data, 3);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2103      	movs	r1, #3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fdf7 	bl	80002fc <decode_rx_frame>
 800070e:	60f8      	str	r0, [r7, #12]

	memset(rx_data, '\0', sizeof(rx_data));
 8000710:	2300      	movs	r3, #0
 8000712:	713b      	strb	r3, [r7, #4]
	return conf_code;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <PS_Empty>:
	uint32_t score = conf_code << 16 | rx_data[0] << 8 | rx_data[1];

	memset(rx_data, '\0', sizeof(rx_data));
	return score;
}
uint8_t PS_Empty(void) {
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
	uint8_t data[1];

	write_directive_command(CMD_PKG, PS_EMPTY_ALL, PS_EMPTY_ALL_LEN, data);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2203      	movs	r2, #3
 8000728:	210d      	movs	r1, #13
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff fd3a 	bl	80001a4 <write_directive_command>

	uint8_t rx_data[1];
	uint8_t conf_code = decode_rx_frame(rx_data, 3);
 8000730:	463b      	mov	r3, r7
 8000732:	2103      	movs	r1, #3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fde1 	bl	80002fc <decode_rx_frame>
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	memset(rx_data, '\0', sizeof(rx_data));
 800073e:	2300      	movs	r3, #0
 8000740:	703b      	strb	r3, [r7, #0]

	return conf_code;
 8000742:	79fb      	ldrb	r3, [r7, #7]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <flush_buff>:

void flush_buff(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	uint8_t dummyData;
	HAL_UART_Receive(&fp, &dummyData, 1, 1000);
 8000752:	1df9      	adds	r1, r7, #7
 8000754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000758:	2201      	movs	r2, #1
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <flush_buff+0x1c>)
 800075c:	f003 fcff 	bl	800415e <HAL_UART_Receive>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001a0 	.word	0x200001a0

0800076c <is_fp_detected>:

uint8_t is_fp_detected(void) {
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	return fp_detected;
 8000770:	4b02      	ldr	r3, [pc, #8]	@ (800077c <is_fp_detected+0x10>)
 8000772:	781b      	ldrb	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200001e8 	.word	0x200001e8

08000780 <clear_fp_flag>:
void clear_fp_flag(void) {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	fp_detected = 0;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <clear_fp_flag+0x14>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200001e8 	.word	0x200001e8

08000798 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	fp.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
	fp.Init.BaudRate = 57600;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80007a8:	605a      	str	r2, [r3, #4]
	fp.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
	fp.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	fp.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
	fp.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
	fp.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
	fp.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&fp) != HAL_OK) {
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f003 fbf2 	bl	8003fb8 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007da:	f000 fc48 	bl	800106e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	40013800 	.word	0x40013800

080007ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	fp_detected = 1;
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <HAL_GPIO_EXTI_Callback+0x1c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200001e8 	.word	0x200001e8

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000810:	b095      	sub	sp, #84	@ 0x54
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fd72 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 fac6 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 fb72 	bl	8000f04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000820:	f000 fb1c 	bl	8000e5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fb44 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000828:	f008 f9cc 	bl	8008bc4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	fp_init();
 800082c:	f7ff fc96 	bl	800015c <fp_init>

	uint8_t bluetooth_data[strlen(password)];
 8000830:	4bb6      	ldr	r3, [pc, #728]	@ (8000b0c <main+0x300>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fc89 	bl	800014c <strlen>
 800083a:	4606      	mov	r6, r0
 800083c:	4633      	mov	r3, r6
 800083e:	3b01      	subs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	2300      	movs	r3, #0
 8000844:	46b0      	mov	r8, r6
 8000846:	4699      	mov	r9, r3
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800085c:	2300      	movs	r3, #0
 800085e:	4634      	mov	r4, r6
 8000860:	461d      	mov	r5, r3
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	00eb      	lsls	r3, r5, #3
 800086c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000870:	00e2      	lsls	r2, r4, #3
 8000872:	1df3      	adds	r3, r6, #7
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	ebad 0d03 	sub.w	sp, sp, r3
 800087c:	466b      	mov	r3, sp
 800087e:	3300      	adds	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]





		HAL_UART_Receive_IT(&huart2, bluetooth_data, sizeof(bluetooth_data)); // Enabling interrupt receive
 8000882:	b2b3      	uxth	r3, r6
 8000884:	461a      	mov	r2, r3
 8000886:	69f9      	ldr	r1, [r7, #28]
 8000888:	48a1      	ldr	r0, [pc, #644]	@ (8000b10 <main+0x304>)
 800088a:	f003 fcfa 	bl	8004282 <HAL_UART_Receive_IT>

		// if a new bluetooth packet is received
		if (pkt_received == 1) {
 800088e:	4ba1      	ldr	r3, [pc, #644]	@ (8000b14 <main+0x308>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	f040 8091 	bne.w	80009ba <main+0x1ae>
			pkt_received = 0;
 8000898:	4b9e      	ldr	r3, [pc, #632]	@ (8000b14 <main+0x308>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]

			// check if the entered password bytes are equal to the password saved
			uint8_t count_corr = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for (int i = 0; i < strlen(password); i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80008a8:	e012      	b.n	80008d0 <main+0xc4>
				if (bluetooth_data[i] == (uint8_t) password[i]) {
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008ae:	4413      	add	r3, r2
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b96      	ldr	r3, [pc, #600]	@ (8000b0c <main+0x300>)
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008b8:	440b      	add	r3, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d104      	bne.n	80008ca <main+0xbe>
					count_corr++;
 80008c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008c4:	3301      	adds	r3, #1
 80008c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for (int i = 0; i < strlen(password); i++) {
 80008ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008cc:	3301      	adds	r3, #1
 80008ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80008d0:	4b8e      	ldr	r3, [pc, #568]	@ (8000b0c <main+0x300>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc39 	bl	800014c <strlen>
 80008da:	4602      	mov	r2, r0
 80008dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008de:	429a      	cmp	r2, r3
 80008e0:	d8e3      	bhi.n	80008aa <main+0x9e>
				}
			}

			// it the password is entered correctly
			if (count_corr == strlen(password)) {
 80008e2:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 80008e6:	4b89      	ldr	r3, [pc, #548]	@ (8000b0c <main+0x300>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc2e 	bl	800014c <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	429c      	cmp	r4, r3
 80008f4:	d13e      	bne.n	8000974 <main+0x168>

				flush_buff();
 80008f6:	f7ff ff29 	bl	800074c <flush_buff>
				uint8_t fp_deleted = PS_Empty(); // empty the saved fingerprints
 80008fa:	f7ff ff10 	bl	800071e <PS_Empty>
 80008fe:	4603      	mov	r3, r0
 8000900:	76fb      	strb	r3, [r7, #27]

				// if FPs are deleted successfully
				if (fp_deleted == 0) {
 8000902:	7efb      	ldrb	r3, [r7, #27]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d119      	bne.n	800093c <main+0x130>
					password_correct = 1; // enable the save of a new FP
 8000908:	4b83      	ldr	r3, [pc, #524]	@ (8000b18 <main+0x30c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1); // open the lock
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000914:	4881      	ldr	r0, [pc, #516]	@ (8000b1c <main+0x310>)
 8000916:	f001 f8d2 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1); // Yellow is ON
 800091a:	2201      	movs	r2, #1
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	487f      	ldr	r0, [pc, #508]	@ (8000b1c <main+0x310>)
 8000920:	f001 f8cd 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0); // Green is OFF
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092a:	487c      	ldr	r0, [pc, #496]	@ (8000b1c <main+0x310>)
 800092c:	f001 f8c7 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0); // Red is OFF
 8000930:	2200      	movs	r2, #0
 8000932:	2140      	movs	r1, #64	@ 0x40
 8000934:	4879      	ldr	r0, [pc, #484]	@ (8000b1c <main+0x310>)
 8000936:	f001 f8c2 	bl	8001abe <HAL_GPIO_WritePin>
 800093a:	e039      	b.n	80009b0 <main+0x1a4>
				} else {
					for (int i = 0; i < ERASE_UNSUCESS_FLASH; i++) {
 800093c:	2300      	movs	r3, #0
 800093e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000940:	e014      	b.n	800096c <main+0x160>
						HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1); // Yellow is ON
 8000942:	2201      	movs	r2, #1
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	4875      	ldr	r0, [pc, #468]	@ (8000b1c <main+0x310>)
 8000948:	f001 f8b9 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 800094c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000950:	f000 fd36 	bl	80013c0 <HAL_Delay>
						HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0); // Yellow is ON
 8000954:	2200      	movs	r2, #0
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	4870      	ldr	r0, [pc, #448]	@ (8000b1c <main+0x310>)
 800095a:	f001 f8b0 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 800095e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000962:	f000 fd2d 	bl	80013c0 <HAL_Delay>
					for (int i = 0; i < ERASE_UNSUCESS_FLASH; i++) {
 8000966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000968:	3301      	adds	r3, #1
 800096a:	647b      	str	r3, [r7, #68]	@ 0x44
 800096c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096e:	2b02      	cmp	r3, #2
 8000970:	dde7      	ble.n	8000942 <main+0x136>
 8000972:	e01d      	b.n	80009b0 <main+0x1a4>
					}
				}

			} else {
				password_correct = 0;
 8000974:	4b68      	ldr	r3, [pc, #416]	@ (8000b18 <main+0x30c>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]

				for (int i = 0; i < INCORRECT_PASS_FLASH; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	@ 0x40
 800097e:	e014      	b.n	80009aa <main+0x19e>
					HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1); // Yellow is ON
 8000980:	2201      	movs	r2, #1
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	4865      	ldr	r0, [pc, #404]	@ (8000b1c <main+0x310>)
 8000986:	f001 f89a 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_Delay(FLASH_DELAY);
 800098a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800098e:	f000 fd17 	bl	80013c0 <HAL_Delay>
					HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0); // Yellow is ON
 8000992:	2200      	movs	r2, #0
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	4861      	ldr	r0, [pc, #388]	@ (8000b1c <main+0x310>)
 8000998:	f001 f891 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_Delay(FLASH_DELAY);
 800099c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009a0:	f000 fd0e 	bl	80013c0 <HAL_Delay>
				for (int i = 0; i < INCORRECT_PASS_FLASH; i++) {
 80009a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009a6:	3301      	adds	r3, #1
 80009a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80009aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	dde7      	ble.n	8000980 <main+0x174>
				}
			}

			memset(bluetooth_data, '\0', sizeof(bluetooth_data));
 80009b0:	4632      	mov	r2, r6
 80009b2:	2100      	movs	r1, #0
 80009b4:	69f8      	ldr	r0, [r7, #28]
 80009b6:	f008 fda1 	bl	80094fc <memset>





		uint32_t currentTime = HAL_GetTick();
 80009ba:	f000 fcf7 	bl	80013ac <HAL_GetTick>
 80009be:	6178      	str	r0, [r7, #20]


		// save the state of the touch sensor
		uint8_t touch_sens_state = HAL_GPIO_ReadPin(TOUCH_SENS_GPIO_Port,
 80009c0:	2102      	movs	r1, #2
 80009c2:	4856      	ldr	r0, [pc, #344]	@ (8000b1c <main+0x310>)
 80009c4:	f001 f864 	bl	8001a90 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		TOUCH_SENS_Pin);

		// if the touch sensor is enabled
		// run the motor for 1 sec

		if (touch_sens_state) {
 80009ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d015      	beq.n	8000a02 <main+0x1f6>
			currentTime = HAL_GetTick();
 80009d6:	f000 fce9 	bl	80013ac <HAL_GetTick>
 80009da:	6178      	str	r0, [r7, #20]
			for(;HAL_GetTick() - currentTime <5;){
 80009dc:	e00a      	b.n	80009f4 <main+0x1e8>
				if(HAL_GPIO_ReadPin(TOUCH_SENS_GPIO_Port,TOUCH_SENS_Pin)){
 80009de:	2102      	movs	r1, #2
 80009e0:	484e      	ldr	r0, [pc, #312]	@ (8000b1c <main+0x310>)
 80009e2:	f001 f855 	bl	8001a90 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <main+0x1e8>

				}else{
					touch_sens_state = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					break;
 80009f2:	e006      	b.n	8000a02 <main+0x1f6>
			for(;HAL_GetTick() - currentTime <5;){
 80009f4:	f000 fcda 	bl	80013ac <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d9ed      	bls.n	80009de <main+0x1d2>
				}
			}
		}
		currentTime = HAL_GetTick();
 8000a02:	f000 fcd3 	bl	80013ac <HAL_GetTick>
 8000a06:	6178      	str	r0, [r7, #20]


		if (touch_sens_state) {
 8000a08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d02e      	beq.n	8000a6e <main+0x262>

			fp_tobeClosed = 0;
 8000a10:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <main+0x314>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
			if(!motor_state){
 8000a16:	4b43      	ldr	r3, [pc, #268]	@ (8000b24 <main+0x318>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d112      	bne.n	8000a44 <main+0x238>
			HAL_GPIO_WritePin(MD_IN1_GPIO_Port, MD_IN1_Pin, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a24:	483d      	ldr	r0, [pc, #244]	@ (8000b1c <main+0x310>)
 8000a26:	f001 f84a 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_IN2_GPIO_Port, MD_IN2_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	483a      	ldr	r0, [pc, #232]	@ (8000b1c <main+0x310>)
 8000a32:	f001 f844 	bl	8001abe <HAL_GPIO_WritePin>
			motor_state = 1;
 8000a36:	4b3b      	ldr	r3, [pc, #236]	@ (8000b24 <main+0x318>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
			motor_on_since = currentTime;
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <main+0x31c>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e049      	b.n	8000ad8 <main+0x2cc>


			}else{
				if(currentTime - motor_on_since > MOTOR_RUNTIME){
 8000a44:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <main+0x31c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d941      	bls.n	8000ad8 <main+0x2cc>
				HAL_GPIO_WritePin(MD_IN1_GPIO_Port, MD_IN1_Pin, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a5a:	4830      	ldr	r0, [pc, #192]	@ (8000b1c <main+0x310>)
 8000a5c:	f001 f82f 	bl	8001abe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MD_IN2_GPIO_Port, MD_IN2_Pin, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a66:	482d      	ldr	r0, [pc, #180]	@ (8000b1c <main+0x310>)
 8000a68:	f001 f829 	bl	8001abe <HAL_GPIO_WritePin>
 8000a6c:	e034      	b.n	8000ad8 <main+0x2cc>


			// Run the motor in a specific direction

		} else {
			if(fp_tobeClosed == 0){
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <main+0x314>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <main+0x276>
				fp_tobeClosed_since = currentTime;
 8000a76:	4a2d      	ldr	r2, [pc, #180]	@ (8000b2c <main+0x320>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	6013      	str	r3, [r2, #0]
				fp_tobeClosed = 1;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <main+0x314>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
			}
			if(currentTime - fp_tobeClosed_since > delay_to_close){
 8000a82:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <main+0x320>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d922      	bls.n	8000ad8 <main+0x2cc>
			if (motor_state == 1) {
 8000a92:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <main+0x318>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d11e      	bne.n	8000ad8 <main+0x2cc>
				motor_state = 0;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <main+0x318>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]

				// Run the motor in the opposite direction
				HAL_GPIO_WritePin(MD_IN1_GPIO_Port, MD_IN1_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa6:	481d      	ldr	r0, [pc, #116]	@ (8000b1c <main+0x310>)
 8000aa8:	f001 f809 	bl	8001abe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MD_IN2_GPIO_Port, MD_IN2_Pin, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab2:	481a      	ldr	r0, [pc, #104]	@ (8000b1c <main+0x310>)
 8000ab4:	f001 f803 	bl	8001abe <HAL_GPIO_WritePin>

				HAL_Delay(MOTOR_RUNTIME); // wait 1 sec
 8000ab8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000abc:	f000 fc80 	bl	80013c0 <HAL_Delay>

				// Stop the motor
				HAL_GPIO_WritePin(MD_IN1_GPIO_Port, MD_IN1_Pin, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac6:	4815      	ldr	r0, [pc, #84]	@ (8000b1c <main+0x310>)
 8000ac8:	f000 fff9 	bl	8001abe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MD_IN2_GPIO_Port, MD_IN2_Pin, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad2:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <main+0x310>)
 8000ad4:	f000 fff3 	bl	8001abe <HAL_GPIO_WritePin>
		uint32_t enroll;
		uint32_t score;
		uint16_t temp_buff_id;

		// if a fingerprint is detected
		if (is_fp_detected() == 1) {
 8000ad8:	f7ff fe48 	bl	800076c <is_fp_detected>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	f040 80f0 	bne.w	8000cc4 <main+0x4b8>

			temp_buff_id = PS_ValidTempleteNum(); // read the number of saved fingerprints
 8000ae4:	f7ff fb40 	bl	8000168 <PS_ValidTempleteNum>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	827b      	strh	r3, [r7, #18]
			int get_image = PS_GetImage(); // get the image (returns: ok: 00, messy, dry, wet)
 8000aec:	f7ff fe00 	bl	80006f0 <PS_GetImage>
 8000af0:	60f8      	str	r0, [r7, #12]

			flush_buff();
 8000af2:	f7ff fe2b 	bl	800074c <flush_buff>



			// if the image acquisition is successful and the password is entered correctly
			// save the FP
			if (get_image == 0 && password_correct) {// here it is detecting the fingerprint and saving it after the user has entered the password through bluwtooth
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d17e      	bne.n	8000bfa <main+0x3ee>
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <main+0x30c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d07a      	beq.n	8000bfa <main+0x3ee>




				// is required to put your finger on the FP 2 times for saving
				for (int i = 0; i < 2; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b08:	e01c      	b.n	8000b44 <main+0x338>
 8000b0a:	bf00      	nop
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000234 	.word	0x20000234
 8000b14:	2000027c 	.word	0x2000027c
 8000b18:	2000027e 	.word	0x2000027e
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	20000288 	.word	0x20000288
 8000b24:	2000027d 	.word	0x2000027d
 8000b28:	20000280 	.word	0x20000280
 8000b2c:	20000284 	.word	0x20000284
					enroll = PS_AutoEnroll(temp_buff_id, 2, 0x003F); // save the fingerprint
 8000b30:	8a7b      	ldrh	r3, [r7, #18]
 8000b32:	223f      	movs	r2, #63	@ 0x3f
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fd62 	bl	8000600 <PS_AutoEnroll>
 8000b3c:	63b8      	str	r0, [r7, #56]	@ 0x38
				for (int i = 0; i < 2; i++) {
 8000b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b40:	3301      	adds	r3, #1
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	ddf2      	ble.n	8000b30 <main+0x324>
				}

				// if FP is saved
				if (((enroll >> 16) & 0xFF) == 0) {
 8000b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d134      	bne.n	8000bbe <main+0x3b2>
					password_correct = 0; // reset the password correct flag
 8000b54:	4b8e      	ldr	r3, [pc, #568]	@ (8000d90 <main+0x584>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0); // Red is OFF
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	@ 0x40
 8000b5e:	488d      	ldr	r0, [pc, #564]	@ (8000d94 <main+0x588>)
 8000b60:	f000 ffad 	bl	8001abe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0); // Yellow is OFF
 8000b64:	2200      	movs	r2, #0
 8000b66:	2180      	movs	r1, #128	@ 0x80
 8000b68:	488a      	ldr	r0, [pc, #552]	@ (8000d94 <main+0x588>)
 8000b6a:	f000 ffa8 	bl	8001abe <HAL_GPIO_WritePin>

					// flash the green multiple times to indicate successful fp save
					for (int i = 0; i < FP_SAVED_FLASH; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b72:	e020      	b.n	8000bb6 <main+0x3aa>
						HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b7a:	4886      	ldr	r0, [pc, #536]	@ (8000d94 <main+0x588>)
 8000b7c:	f000 ff9f 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	4883      	ldr	r0, [pc, #524]	@ (8000d94 <main+0x588>)
 8000b86:	f000 ff9a 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 8000b8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b8e:	f000 fc17 	bl	80013c0 <HAL_Delay>
						HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	@ 0x40
 8000b96:	487f      	ldr	r0, [pc, #508]	@ (8000d94 <main+0x588>)
 8000b98:	f000 ff91 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba2:	487c      	ldr	r0, [pc, #496]	@ (8000d94 <main+0x588>)
 8000ba4:	f000 ff8b 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 8000ba8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bac:	f000 fc08 	bl	80013c0 <HAL_Delay>
					for (int i = 0; i < FP_SAVED_FLASH; i++) {
 8000bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	dddb      	ble.n	8000b74 <main+0x368>
 8000bbc:	e01a      	b.n	8000bf4 <main+0x3e8>
					}
				} else {
					for (int i = 0; i < FP_NOT_SAVED_FLASH; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bc2:	e014      	b.n	8000bee <main+0x3e2>
						HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2140      	movs	r1, #64	@ 0x40
 8000bc8:	4872      	ldr	r0, [pc, #456]	@ (8000d94 <main+0x588>)
 8000bca:	f000 ff78 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 8000bce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bd2:	f000 fbf5 	bl	80013c0 <HAL_Delay>
						HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	@ 0x40
 8000bda:	486e      	ldr	r0, [pc, #440]	@ (8000d94 <main+0x588>)
 8000bdc:	f000 ff6f 	bl	8001abe <HAL_GPIO_WritePin>
						HAL_Delay(FLASH_DELAY);
 8000be0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000be4:	f000 fbec 	bl	80013c0 <HAL_Delay>
					for (int i = 0; i < FP_NOT_SAVED_FLASH; i++) {
 8000be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bea:	3301      	adds	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	dde7      	ble.n	8000bc4 <main+0x3b8>
					}
				}
				flush_buff();
 8000bf4:	f7ff fdaa 	bl	800074c <flush_buff>
 8000bf8:	e039      	b.n	8000c6e <main+0x462>





			} else if (get_image == 0) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d123      	bne.n	8000c48 <main+0x43c>




				for (int i = 0; i < temp_buff_id; i++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c04:	e01b      	b.n	8000c3e <main+0x432>
					score = PS_AutoIdentify(i, 20);
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	2114      	movs	r1, #20
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fd34 	bl	800067a <PS_AutoIdentify>
 8000c12:	6378      	str	r0, [r7, #52]	@ 0x34

					// if the score of the fp is high
					if (((score >> 8 | score) & 0xFF) > 3) {
 8000c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c16:	0a1a      	lsrs	r2, r3, #8
 8000c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <main+0x420>
						fp_correct = 1;
 8000c24:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <main+0x58c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
						break;
 8000c2a:	e020      	b.n	8000c6e <main+0x462>
					} else {
						fp_correct = 0;
 8000c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000d98 <main+0x58c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
					}
					HAL_Delay(3);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fbc4 	bl	80013c0 <HAL_Delay>
				for (int i = 0; i < temp_buff_id; i++) {
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3e:	8a7b      	ldrh	r3, [r7, #18]
 8000c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbdf      	blt.n	8000c06 <main+0x3fa>
 8000c46:	e012      	b.n	8000c6e <main+0x462>





			} else if (get_image != 0 ) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00f      	beq.n	8000c6e <main+0x462>

				if(x>0){HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);}//remooving initilly red error
 8000c4e:	4b53      	ldr	r3, [pc, #332]	@ (8000d9c <main+0x590>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd04      	ble.n	8000c60 <main+0x454>
 8000c56:	2201      	movs	r2, #1
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	484e      	ldr	r0, [pc, #312]	@ (8000d94 <main+0x588>)
 8000c5c:	f000 ff2f 	bl	8001abe <HAL_GPIO_WritePin>
				flush_buff();
 8000c60:	f7ff fd74 	bl	800074c <flush_buff>
				x++;
 8000c64:	4b4d      	ldr	r3, [pc, #308]	@ (8000d9c <main+0x590>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a4c      	ldr	r2, [pc, #304]	@ (8000d9c <main+0x590>)
 8000c6c:	6013      	str	r3, [r2, #0]





			usb_data[0] = temp_buff_id >> 8; // valid fp template high byte
 8000c6e:	8a7b      	ldrh	r3, [r7, #18]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	703b      	strb	r3, [r7, #0]
			usb_data[1] = temp_buff_id; // valid fp template low byte
 8000c78:	8a7b      	ldrh	r3, [r7, #18]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	707b      	strb	r3, [r7, #1]
			usb_data[2] = get_image; // conf code of get image get_image
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	70bb      	strb	r3, [r7, #2]

			usb_data[3] = score >> 24; // conf code of enroll
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	0e1b      	lsrs	r3, r3, #24
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	70fb      	strb	r3, [r7, #3]
			usb_data[4] = score >> 16; // parameter 1
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	713b      	strb	r3, [r7, #4]
			usb_data[5] = score >> 8; // // parameter 2
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	717b      	strb	r3, [r7, #5]
			usb_data[6] = score; // conf code of enroll
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	71bb      	strb	r3, [r7, #6]

			usb_data[7] = enroll >> 8; // parameter 1
 8000ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	71fb      	strb	r3, [r7, #7]
			usb_data[8] = enroll; // // parameter 2
 8000caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	723b      	strb	r3, [r7, #8]

			HAL_Delay(50);
 8000cb0:	2032      	movs	r0, #50	@ 0x32
 8000cb2:	f000 fb85 	bl	80013c0 <HAL_Delay>
			CDC_Transmit_FS(usb_data, sizeof(usb_data));
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2109      	movs	r1, #9
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 f840 	bl	8008d40 <CDC_Transmit_FS>
			clear_fp_flag();
 8000cc0:	f7ff fd5e 	bl	8000780 <clear_fp_flag>





		if (fp_correct == 1) {
 8000cc4:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <main+0x58c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d136      	bne.n	8000d3a <main+0x52e>

			static uint32_t lock_run_time = 0;

			HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cd2:	4830      	ldr	r0, [pc, #192]	@ (8000d94 <main+0x588>)
 8000cd4:	f000 fef3 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cde:	482d      	ldr	r0, [pc, #180]	@ (8000d94 <main+0x588>)
 8000ce0:	f000 feed 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	482a      	ldr	r0, [pc, #168]	@ (8000d94 <main+0x588>)
 8000cea:	f000 fee8 	bl	8001abe <HAL_GPIO_WritePin>

			if (lock_run_time == 0)
 8000cee:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <main+0x594>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d104      	bne.n	8000d00 <main+0x4f4>
				lock_run_time = HAL_GetTick();
 8000cf6:	f000 fb59 	bl	80013ac <HAL_GetTick>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a28      	ldr	r2, [pc, #160]	@ (8000da0 <main+0x594>)
 8000cfe:	6013      	str	r3, [r2, #0]

			if (HAL_GetTick() - lock_run_time > LOCK_RUNTIME) {
 8000d00:	f000 fb54 	bl	80013ac <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <main+0x594>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d939      	bls.n	8000d88 <main+0x57c>
				HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d1a:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <main+0x588>)
 8000d1c:	f000 fecf 	bl	8001abe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <main+0x588>)
 8000d28:	f000 fec9 	bl	8001abe <HAL_GPIO_WritePin>
				lock_run_time = 0;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <main+0x594>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
				fp_correct = 2;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <main+0x58c>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e026      	b.n	8000d88 <main+0x57c>
			}
		} else if (fp_correct == 0 ) {
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <main+0x58c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d122      	bne.n	8000d88 <main+0x57c>
			static uint32_t lock_run_time = 0;

			HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <main+0x588>)
 8000d48:	f000 feb9 	bl	8001abe <HAL_GPIO_WritePin>

			if (lock_run_time == 0)
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <main+0x598>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <main+0x552>
				lock_run_time = HAL_GetTick();
 8000d54:	f000 fb2a 	bl	80013ac <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <main+0x598>)
 8000d5c:	6013      	str	r3, [r2, #0]

			if (HAL_GetTick() - lock_run_time > LOCK_RUNTIME) {
 8000d5e:	f000 fb25 	bl	80013ac <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <main+0x598>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d90a      	bls.n	8000d88 <main+0x57c>
				HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2140      	movs	r1, #64	@ 0x40
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <main+0x588>)
 8000d78:	f000 fea1 	bl	8001abe <HAL_GPIO_WritePin>
				lock_run_time = 0;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <main+0x598>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
				fp_correct = 2;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <main+0x58c>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]





		HAL_Delay(40);
 8000d88:	2028      	movs	r0, #40	@ 0x28
 8000d8a:	f000 fb19 	bl	80013c0 <HAL_Delay>
	while (1) {
 8000d8e:	e578      	b.n	8000882 <main+0x76>
 8000d90:	2000027e 	.word	0x2000027e
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	2000028c 	.word	0x2000028c
 8000da0:	20000290 	.word	0x20000290
 8000da4:	20000294 	.word	0x20000294

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db2:	2228      	movs	r2, #40	@ 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f008 fba0 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fc14 	bl	800362c <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e0a:	f000 f930 	bl	800106e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fe80 	bl	8003b30 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e36:	f000 f91a 	bl	800106e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 f801 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e50:	f000 f90d 	bl	800106e <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	@ 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <MX_USART1_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e68:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f003 f890 	bl	8003fb8 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f8e6 	bl	800106e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001ec 	.word	0x200001ec
 8000eac:	40013800 	.word	0x40013800

08000eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <MX_USART2_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f003 f866 	bl	8003fb8 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f8bc 	bl	800106e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000234 	.word	0x20000234
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a3d      	ldr	r2, [pc, #244]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b3b      	ldr	r3, [pc, #236]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a37      	ldr	r2, [pc, #220]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f36:	f043 0320 	orr.w	r3, r3, #32
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b35      	ldr	r3, [pc, #212]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a31      	ldr	r2, [pc, #196]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a2b      	ldr	r2, [pc, #172]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <MX_GPIO_Init+0x110>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7e:	4826      	ldr	r0, [pc, #152]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f80:	f000 fd9d 	bl	8001abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MD_EN_Pin|MD_IN2_Pin|MD_IN1_Pin|RED_Pin
 8000f84:	2200      	movs	r2, #0
 8000f86:	f24e 31c0 	movw	r1, #58304	@ 0xe3c0
 8000f8a:	4824      	ldr	r0, [pc, #144]	@ (800101c <MX_GPIO_Init+0x118>)
 8000f8c:	f000 fd97 	bl	8001abe <HAL_GPIO_WritePin>
                          |YELLOW_Pin|GREEN_Pin|LOCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481b      	ldr	r0, [pc, #108]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000faa:	f000 fbed 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_SENS_Pin */
  GPIO_InitStruct.Pin = TOUCH_SENS_Pin;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_SENS_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4816      	ldr	r0, [pc, #88]	@ (800101c <MX_GPIO_Init+0x118>)
 8000fc2:	f000 fbe1 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : MD_EN_Pin MD_IN2_Pin MD_IN1_Pin RED_Pin
                           YELLOW_Pin GREEN_Pin LOCK_Pin */
  GPIO_InitStruct.Pin = MD_EN_Pin|MD_IN2_Pin|MD_IN1_Pin|RED_Pin
 8000fc6:	f24e 33c0 	movw	r3, #58304	@ 0xe3c0
 8000fca:	613b      	str	r3, [r7, #16]
                          |YELLOW_Pin|GREEN_Pin|LOCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480f      	ldr	r0, [pc, #60]	@ (800101c <MX_GPIO_Init+0x118>)
 8000fe0:	f000 fbd2 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_IRQ_Pin */
  GPIO_InitStruct.Pin = FP_IRQ_Pin;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_GPIO_Init+0x11c>)
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <MX_GPIO_Init+0x118>)
 8000ff8:	f000 fbc6 	bl	8001788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fad8 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001006:	200a      	movs	r0, #10
 8001008:	f000 faf1 	bl	80015ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000
 8001018:	40011000 	.word	0x40011000
 800101c:	40010c00 	.word	0x40010c00
 8001020:	10110000 	.word	0x10110000

08001024 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_UART_RxCpltCallback+0x2c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d107      	bne.n	8001046 <HAL_UART_RxCpltCallback+0x22>
		pkt_received = 1;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <HAL_UART_RxCpltCallback+0x30>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800103c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <HAL_UART_RxCpltCallback+0x34>)
 8001042:	f000 fd54 	bl	8001aee <HAL_GPIO_TogglePin>
	}
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	2000027c 	.word	0x2000027c
 8001058:	40011000 	.word	0x40011000

0800105c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001072:	b672      	cpsid	i
}
 8001074:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001076:	bf00      	nop
 8001078:	e7fd      	b.n	8001076 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_MspInit+0x6c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <HAL_MspInit+0x6c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_MspInit+0x6c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_MspInit+0x6c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <HAL_MspInit+0x6c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <HAL_MspInit+0x6c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	f000 fa7d 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010bc:	2005      	movs	r0, #5
 80010be:	f000 fa96 	bl	80015ee <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_MspInit+0x70>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_MspInit+0x70>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a3b      	ldr	r2, [pc, #236]	@ (80011f8 <HAL_UART_MspInit+0x108>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d132      	bne.n	8001176 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001110:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = FP_RX_Pin;
 8001140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FP_RX_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	4619      	mov	r1, r3
 8001154:	482a      	ldr	r0, [pc, #168]	@ (8001200 <HAL_UART_MspInit+0x110>)
 8001156:	f000 fb17 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FP_TX_Pin;
 800115a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FP_TX_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4619      	mov	r1, r3
 800116e:	4824      	ldr	r0, [pc, #144]	@ (8001200 <HAL_UART_MspInit+0x110>)
 8001170:	f000 fb0a 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001174:	e03c      	b.n	80011f0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <HAL_UART_MspInit+0x114>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d137      	bne.n	80011f0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_UART_MspInit+0x10c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_RX_Pin;
 80011b0:	2304      	movs	r3, #4
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4619      	mov	r1, r3
 80011c2:	480f      	ldr	r0, [pc, #60]	@ (8001200 <HAL_UART_MspInit+0x110>)
 80011c4:	f000 fae0 	bl	8001788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_TX_Pin;
 80011c8:	2308      	movs	r3, #8
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <HAL_UART_MspInit+0x110>)
 80011dc:	f000 fad4 	bl	8001788 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2026      	movs	r0, #38	@ 0x26
 80011e6:	f000 f9e6 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ea:	2026      	movs	r0, #38	@ 0x26
 80011ec:	f000 f9ff 	bl	80015ee <HAL_NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800
 8001204:	40004400 	.word	0x40004400

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f896 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_IRQ_Pin);
 8001270:	2010      	movs	r0, #16
 8001272:	f000 fc55 	bl	8001b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001282:	f000 fd8a 	bl	8001d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000f64 	.word	0x20000f64

08001290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART2_IRQHandler+0x10>)
 8001296:	f003 f819 	bl	80042cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000234 	.word	0x20000234

080012a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff fff8 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012b6:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012b8:	4a0c      	ldr	r2, [pc, #48]	@ (80012ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012cc:	4c09      	ldr	r4, [pc, #36]	@ (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f008 f917 	bl	800950c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7ff fa95 	bl	800080c <main>
  bx lr
 80012e2:	4770      	bx	lr
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80012ec:	080097f8 	.word	0x080097f8
  ldr r2, =_sbss
 80012f0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80012f4:	20001474 	.word	0x20001474

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f947 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff feb0 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f95f 	bl	800160a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f927 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000008 	.word	0x20000008
 8001380:	20000010 	.word	0x20000010
 8001384:	2000000c 	.word	0x2000000c

08001388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_IncTick+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_IncTick+0x20>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a03      	ldr	r2, [pc, #12]	@ (80013a8 <HAL_IncTick+0x20>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000010 	.word	0x20000010
 80013a8:	20000298 	.word	0x20000298

080013ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <HAL_GetTick+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000298 	.word	0x20000298

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff fff0 	bl	80013ac <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffe0 	bl	80013ac <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000010 	.word	0x20000010

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4906      	ldr	r1, [pc, #24]	@ (80014a0 <__NVIC_EnableIRQ+0x34>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff90 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	@ (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff2d 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff42 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff35 	bl	800146c <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d008      	beq.n	800164c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e020      	b.n	800168e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020e 	bic.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d005      	beq.n	80016bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2204      	movs	r2, #4
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e051      	b.n	8001760 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020e 	bic.w	r2, r2, #14
 80016ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a22      	ldr	r2, [pc, #136]	@ (800176c <HAL_DMA_Abort_IT+0xd4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d029      	beq.n	800173a <HAL_DMA_Abort_IT+0xa2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <HAL_DMA_Abort_IT+0xd8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_Abort_IT+0x9e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001774 <HAL_DMA_Abort_IT+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_Abort_IT+0x98>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <HAL_DMA_Abort_IT+0xe0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d012      	beq.n	800172a <HAL_DMA_Abort_IT+0x92>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_DMA_Abort_IT+0xe4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00a      	beq.n	8001724 <HAL_DMA_Abort_IT+0x8c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_DMA_Abort_IT+0xe8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_DMA_Abort_IT+0x86>
 8001718:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800171c:	e00e      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800171e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001722:	e00b      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	e008      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800172a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172e:	e005      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	e002      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001736:	2310      	movs	r3, #16
 8001738:	e000      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800173a:	2301      	movs	r3, #1
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_DMA_Abort_IT+0xec>)
 800173e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
    } 
  }
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	@ 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e169      	b.n	8001a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8158 	bne.w	8001a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a9a      	ldr	r2, [pc, #616]	@ (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d05e      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017c4:	4a98      	ldr	r2, [pc, #608]	@ (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d875      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ca:	4a98      	ldr	r2, [pc, #608]	@ (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d058      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017d0:	4a96      	ldr	r2, [pc, #600]	@ (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d86f      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017d6:	4a96      	ldr	r2, [pc, #600]	@ (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d052      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017dc:	4a94      	ldr	r2, [pc, #592]	@ (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d869      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017e2:	4a94      	ldr	r2, [pc, #592]	@ (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04c      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017e8:	4a92      	ldr	r2, [pc, #584]	@ (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d863      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ee:	4a92      	ldr	r2, [pc, #584]	@ (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d046      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017f4:	4a90      	ldr	r2, [pc, #576]	@ (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d85d      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d82a      	bhi.n	8001854 <HAL_GPIO_Init+0xcc>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d859      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <HAL_GPIO_Init+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001883 	.word	0x08001883
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800186f 	.word	0x0800186f
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018b7 	.word	0x080018b7
 8001820:	080018b7 	.word	0x080018b7
 8001824:	080018b7 	.word	0x080018b7
 8001828:	080018b7 	.word	0x080018b7
 800182c:	080018b7 	.word	0x080018b7
 8001830:	080018b7 	.word	0x080018b7
 8001834:	080018b7 	.word	0x080018b7
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	08001865 	.word	0x08001865
 8001850:	08001879 	.word	0x08001879
 8001854:	4a79      	ldr	r2, [pc, #484]	@ (8001a3c <HAL_GPIO_Init+0x2b4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e029      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e024      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01f      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e01a      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e013      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          break;
 80018b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	@ 0xff
 80018bc:	d801      	bhi.n	80018c2 <HAL_GPIO_Init+0x13a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_Init+0x13e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	@ 0xff
 80018cc:	d802      	bhi.n	80018d4 <HAL_GPIO_Init+0x14c>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x152>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	210f      	movs	r1, #15
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80b1 	beq.w	8001a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	@ (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4a      	ldr	r3, [pc, #296]	@ (8001a40 <HAL_GPIO_Init+0x2b8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HAL_GPIO_Init+0x2c0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d013      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a4c <HAL_GPIO_Init+0x2c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3e      	ldr	r2, [pc, #248]	@ (8001a50 <HAL_GPIO_Init+0x2c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a54 <HAL_GPIO_Init+0x2cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001964:	2303      	movs	r3, #3
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2304      	movs	r3, #4
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001986:	492f      	ldr	r1, [pc, #188]	@ (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	492c      	ldr	r1, [pc, #176]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4928      	ldr	r1, [pc, #160]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c8:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4922      	ldr	r1, [pc, #136]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	491e      	ldr	r1, [pc, #120]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4918      	ldr	r1, [pc, #96]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fe:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4914      	ldr	r1, [pc, #80]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	490e      	ldr	r1, [pc, #56]	@ (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e021      	b.n	8001a6a <HAL_GPIO_Init+0x2e2>
 8001a26:	bf00      	nop
 8001a28:	10320000 	.word	0x10320000
 8001a2c:	10310000 	.word	0x10310000
 8001a30:	10220000 	.word	0x10220000
 8001a34:	10210000 	.word	0x10210000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40011400 	.word	0x40011400
 8001a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae8e 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	@ 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ace:	787b      	ldrb	r3, [r7, #1]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	041a      	lsls	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fe54 	bl	80007ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b08b      	sub	sp, #44	@ 0x2c
 8001b54:	af06      	add	r7, sp, #24
 8001b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0f1      	b.n	8001d46 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f007 fa16 	bl	8008fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 f93b 	bl	8004e04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	687e      	ldr	r6, [r7, #4]
 8001b96:	466d      	mov	r5, sp
 8001b98:	f106 0410 	add.w	r4, r6, #16
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	602b      	str	r3, [r5, #0]
 8001ba4:	1d33      	adds	r3, r6, #4
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f003 f905 	bl	8004db8 <USB_CoreInit>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0c2      	b.n	8001d46 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f936 	bl	8004e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e040      	b.n	8001c54 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3301      	adds	r3, #1
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3303      	adds	r3, #3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3338      	adds	r3, #56	@ 0x38
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	333c      	adds	r3, #60	@ 0x3c
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	3340      	adds	r3, #64	@ 0x40
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3b9      	bcc.n	8001bd2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e044      	b.n	8001cee <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3b5      	bcc.n	8001c64 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	687e      	ldr	r6, [r7, #4]
 8001d00:	466d      	mov	r5, sp
 8001d02:	f106 0410 	add.w	r4, r6, #16
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	602b      	str	r3, [r5, #0]
 8001d0e:	1d33      	adds	r3, r6, #4
 8001d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f003 f89c 	bl	8004e50 <USB_DevInit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00d      	b.n	8001d46 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f005 fb1d 	bl	800737e <USB_DevDisconnect>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_PCD_Start+0x16>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e016      	b.n	8001d92 <HAL_PCD_Start+0x44>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f831 	bl	8004dd8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d76:	2101      	movs	r1, #1
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f007 fb88 	bl	800948e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 faf1 	bl	800736a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b088      	sub	sp, #32
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 faf3 	bl	8007392 <USB_ReadInterrupts>
 8001dac:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fb1b 	bl	80023f4 <PCD_EP_ISR_Handler>

    return;
 8001dbe:	e119      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f007 f95b 	bl	800909e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001de8:	2100      	movs	r1, #0
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f905 	bl	8001ffa <HAL_PCD_SetAddress>

    return;
 8001df0:	e100      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00c      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e14:	e0ee      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00c      	beq.n	8001e3a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e38:	e0dc      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d027      	beq.n	8001e94 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	b292      	uxth	r2, r2
 8001e58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0208 	bic.w	r2, r2, #8
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f007 f94b 	bl	8009110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e92:	e0af      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8083 	beq.w	8001fa6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	77fb      	strb	r3, [r7, #31]
 8001ea4:	e010      	b.n	8001ec8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	7ffb      	ldrb	r3, [r7, #31]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	3320      	adds	r3, #32
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	d9eb      	bls.n	8001ea6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001efe:	bf00      	nop
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f6      	beq.n	8001f00 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f24:	b292      	uxth	r2, r2
 8001f26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	77fb      	strb	r3, [r7, #31]
 8001f2e:	e00f      	b.n	8001f50 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	4611      	mov	r1, r2
 8001f38:	7ffa      	ldrb	r2, [r7, #31]
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	440a      	add	r2, r1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	3320      	adds	r3, #32
 8001f42:	443b      	add	r3, r7
 8001f44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f48:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	d9ec      	bls.n	8001f30 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0208 	orr.w	r2, r2, #8
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f80:	b292      	uxth	r2, r2
 8001f82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0204 	orr.w	r2, r2, #4
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f007 f89c 	bl	80090dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fa4:	e026      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00f      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f007 f85a 	bl	8009082 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fce:	e011      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fec:	b292      	uxth	r2, r2
 8001fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ff2:	bf00      	nop
  }
}
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_PCD_SetAddress+0x1a>
 8002010:	2302      	movs	r3, #2
 8002012:	e013      	b.n	800203c <HAL_PCD_SetAddress+0x42>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f005 f989 	bl	8007344 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	460b      	mov	r3, r1
 8002058:	803b      	strh	r3, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da0e      	bge.n	8002088 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	705a      	strb	r2, [r3, #1]
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 0207 	and.w	r2, r3, #7
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020b2:	883a      	ldrh	r2, [r7, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	78ba      	ldrb	r2, [r7, #2]
 80020bc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020be:	78bb      	ldrb	r3, [r7, #2]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d102      	bne.n	80020ca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_EP_Open+0x94>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00e      	b.n	80020f6 <HAL_PCD_EP_Open+0xb2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fed2 	bl	8004e90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800210a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da0e      	bge.n	8002130 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_PCD_EP_Close+0x6a>
 8002164:	2302      	movs	r3, #2
 8002166:	e00e      	b.n	8002186 <HAL_PCD_EP_Close+0x88>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fa4a 	bl	8005610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	460b      	mov	r3, r1
 800219c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	f003 0207 	and.w	r2, r3, #7
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2200      	movs	r2, #0
 80021cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fc01 	bl	80059e8 <USB_EPStartXfer>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2201      	movs	r2, #1
 8002268:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	b2da      	uxtb	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6979      	ldr	r1, [r7, #20]
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fbb3 	bl	80059e8 <USB_EPStartXfer>

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0207 	and.w	r2, r3, #7
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d901      	bls.n	80022aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e04c      	b.n	8002344 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0e      	bge.n	80022d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	705a      	strb	r2, [r3, #1]
 80022ce:	e00c      	b.n	80022ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_PCD_EP_SetStall+0x7e>
 8002306:	2302      	movs	r3, #2
 8002308:	e01c      	b.n	8002344 <HAL_PCD_EP_SetStall+0xb8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68f9      	ldr	r1, [r7, #12]
 8002318:	4618      	mov	r0, r3
 800231a:	f004 ff16 	bl	800714a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f005 f83b 	bl	80073b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d901      	bls.n	800236a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e040      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da0e      	bge.n	8002390 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	705a      	strb	r2, [r3, #1]
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_EP_ClrStall+0x82>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 ff04 	bl	80071ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b096      	sub	sp, #88	@ 0x58
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023fc:	e3be      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002406:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800240a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002418:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 8178 	bne.w	8002712 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002422:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d151      	bne.n	80024d2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	81fb      	strh	r3, [r7, #14]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	89fb      	ldrh	r3, [r7, #14]
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29b      	uxth	r3, r3
 8002450:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3328      	adds	r3, #40	@ 0x28
 8002456:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	3302      	adds	r3, #2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002482:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	441a      	add	r2, r3
 800248e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002490:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 fdda 	bl	800904e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 836a 	beq.w	8002b7c <PCD_EP_ISR_Handler+0x788>
 80024a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 8365 	bne.w	8002b7c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024d0:	e354      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024d8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d034      	beq.n	800255a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	3306      	adds	r3, #6
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800252a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800252e:	b29b      	uxth	r3, r3
 8002530:	f004 ff8e 	bl	8007450 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
 800253c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002540:	4013      	ands	r3, r2
 8002542:	823b      	strh	r3, [r7, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	8a3a      	ldrh	r2, [r7, #16]
 800254a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800254e:	b292      	uxth	r2, r2
 8002550:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f006 fd4e 	bl	8008ff4 <HAL_PCD_SetupStageCallback>
 8002558:	e310      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800255a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800255e:	2b00      	cmp	r3, #0
 8002560:	f280 830c 	bge.w	8002b7c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29a      	uxth	r2, r3
 800256c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002570:	4013      	ands	r3, r2
 8002572:	83fb      	strh	r3, [r7, #30]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	8bfa      	ldrh	r2, [r7, #30]
 800257a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800257e:	b292      	uxth	r2, r2
 8002580:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3306      	adds	r3, #6
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <PCD_EP_ISR_Handler+0x1f6>
 80025b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	6959      	ldr	r1, [r3, #20]
 80025c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f004 ff3e 	bl	8007450 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	441a      	add	r2, r3
 80025de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025e2:	2100      	movs	r1, #0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f006 fd17 	bl	8009018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80025f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 82bd 	bne.w	8002b7c <PCD_EP_ISR_Handler+0x788>
 8002602:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002606:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800260a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800260e:	f000 82b5 	beq.w	8002b7c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263c:	b29a      	uxth	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b3e      	cmp	r3, #62	@ 0x3e
 8002648:	d91d      	bls.n	8002686 <PCD_EP_ISR_Handler+0x292>
 800264a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
 8002652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <PCD_EP_ISR_Handler+0x270>
 800265e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002660:	3b01      	subs	r3, #1
 8002662:	647b      	str	r3, [r7, #68]	@ 0x44
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29a      	uxth	r2, r3
 800266a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266c:	b29b      	uxth	r3, r3
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	b29b      	uxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267e:	b29a      	uxth	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	e026      	b.n	80026d4 <PCD_EP_ISR_Handler+0x2e0>
 8002686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x2b0>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e017      	b.n	80026d4 <PCD_EP_ISR_Handler+0x2e0>
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <PCD_EP_ISR_Handler+0x2ca>
 80026b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ba:	3301      	adds	r3, #1
 80026bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e4:	827b      	strh	r3, [r7, #18]
 80026e6:	8a7b      	ldrh	r3, [r7, #18]
 80026e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80026ec:	827b      	strh	r3, [r7, #18]
 80026ee:	8a7b      	ldrh	r3, [r7, #18]
 80026f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80026f4:	827b      	strh	r3, [r7, #18]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	8a7b      	ldrh	r3, [r7, #18]
 80026fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800270c:	b29b      	uxth	r3, r3
 800270e:	8013      	strh	r3, [r2, #0]
 8002710:	e234      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002726:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800272a:	2b00      	cmp	r3, #0
 800272c:	f280 80fc 	bge.w	8002928 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002746:	4013      	ands	r3, r2
 8002748:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800275e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002762:	b292      	uxth	r2, r2
 8002764:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002766:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800277c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277e:	7b1b      	ldrb	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d125      	bne.n	80027d0 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	3306      	adds	r3, #6
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80027b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8092 	beq.w	80028de <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c4:	88da      	ldrh	r2, [r3, #6]
 80027c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80027ca:	f004 fe41 	bl	8007450 <USB_ReadPMA>
 80027ce:	e086      	b.n	80028de <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	78db      	ldrb	r3, [r3, #3]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d10a      	bne.n	80027ee <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027dc:	461a      	mov	r2, r3
 80027de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9d9 	bl	8002b98 <HAL_PCD_EP_DB_Receive>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80027ec:	e077      	b.n	80028de <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002808:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d024      	beq.n	8002896 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	3302      	adds	r3, #2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002874:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002878:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02e      	beq.n	80028de <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288a:	891a      	ldrh	r2, [r3, #8]
 800288c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002890:	f004 fdde 	bl	8007450 <USB_ReadPMA>
 8002894:	e023      	b.n	80028de <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	3306      	adds	r3, #6
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80028c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	895a      	ldrh	r2, [r3, #10]
 80028d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028da:	f004 fdb9 	bl	8007450 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028e6:	441a      	add	r2, r3
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028f4:	441a      	add	r2, r3
 80028f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <PCD_EP_ISR_Handler+0x51a>
 8002902:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d206      	bcs.n	800291c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800290e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f006 fb7f 	bl	8009018 <HAL_PCD_DataOutStageCallback>
 800291a:	e005      	b.n	8002928 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002922:	4618      	mov	r0, r3
 8002924:	f003 f860 	bl	80059e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002928:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8123 	beq.w	8002b7c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002936:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002964:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800297a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002982:	b29b      	uxth	r3, r3
 8002984:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002988:	78db      	ldrb	r3, [r3, #3]
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 80a2 	bne.w	8002ad4 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	7b1b      	ldrb	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8093 	beq.w	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d046      	beq.n	8002a3a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d126      	bne.n	8002a02 <PCD_EP_ISR_Handler+0x60e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	4413      	add	r3, r2
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	011a      	lsls	r2, r3, #4
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	801a      	strh	r2, [r3, #0]
 8002a00:	e061      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
 8002a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d15d      	bne.n	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	4413      	add	r3, r2
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	011a      	lsls	r2, r3, #4
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e045      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d126      	bne.n	8002a96 <PCD_EP_ISR_Handler+0x6a2>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5c:	4413      	add	r3, r2
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	011a      	lsls	r2, r3, #4
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	4413      	add	r3, r2
 8002a6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	801a      	strh	r2, [r3, #0]
 8002a94:	e017      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
 8002a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d113      	bne.n	8002ac6 <PCD_EP_ISR_Handler+0x6d2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aac:	4413      	add	r3, r2
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	011a      	lsls	r2, r3, #4
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab8:	4413      	add	r3, r2
 8002aba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f006 fabe 	bl	800904e <HAL_PCD_DataInStageCallback>
 8002ad2:	e053      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d146      	bne.n	8002b6e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	3302      	adds	r3, #2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b08:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d907      	bls.n	8002b28 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b20:	1ad2      	subs	r2, r2, r3
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e002      	b.n	8002b2e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f006 fa86 	bl	800904e <HAL_PCD_DataInStageCallback>
 8002b42:	e01b      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b4c:	441a      	add	r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b5a:	441a      	add	r2, r3
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 ff3e 	bl	80059e8 <USB_EPStartXfer>
 8002b6c:	e006      	b.n	8002b7c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b72:	461a      	mov	r2, r3
 8002b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f91b 	bl	8002db2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f6ff ac38 	blt.w	80023fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3758      	adds	r7, #88	@ 0x58
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d07e      	beq.n	8002cae <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d306      	bcc.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	e002      	b.n	8002bf8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	833b      	strh	r3, [r7, #24]
 8002c1c:	8b3b      	ldrh	r3, [r7, #24]
 8002c1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c22:	833b      	strh	r3, [r7, #24]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	8b3b      	ldrh	r3, [r7, #24]
 8002c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01f      	beq.n	8002c92 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6c:	82fb      	strh	r3, [r7, #22]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8087 	beq.w	8002da8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6959      	ldr	r1, [r3, #20]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	891a      	ldrh	r2, [r3, #8]
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	f004 fbd2 	bl	8007450 <USB_ReadPMA>
 8002cac:	e07c      	b.n	8002da8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3306      	adds	r3, #6
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	8b7b      	ldrh	r3, [r7, #26]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d306      	bcc.n	8002cf0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	8b7b      	ldrh	r3, [r7, #26]
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	e002      	b.n	8002cf6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d123      	bne.n	8002d46 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d18:	83fb      	strh	r3, [r7, #30]
 8002d1a:	8bfb      	ldrh	r3, [r7, #30]
 8002d1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d20:	83fb      	strh	r3, [r7, #30]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	8bfb      	ldrh	r3, [r7, #30]
 8002d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6a:	83bb      	strh	r3, [r7, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	8bbb      	ldrh	r3, [r7, #28]
 8002d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d90:	8b7b      	ldrh	r3, [r7, #26]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6959      	ldr	r1, [r3, #20]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	895a      	ldrh	r2, [r3, #10]
 8002da2:	8b7b      	ldrh	r3, [r7, #26]
 8002da4:	f004 fb54 	bl	8007450 <USB_ReadPMA>
    }
  }

  return count;
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b0a4      	sub	sp, #144	@ 0x90
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 81dd 	beq.w	8003186 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	3302      	adds	r3, #2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d907      	bls.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	619a      	str	r2, [r3, #24]
 8002e12:	e002      	b.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 80b9 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d126      	bne.n	8002e7a <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	4413      	add	r3, r2
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	011a      	lsls	r2, r3, #4
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	e01a      	b.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d116      	bne.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	4413      	add	r3, r2
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	011a      	lsls	r2, r3, #4
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	2200      	movs	r2, #0
 8002eae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d126      	bne.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	011a      	lsls	r2, r3, #4
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	e017      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d113      	bne.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	4413      	add	r3, r2
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	011a      	lsls	r2, r3, #4
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	4413      	add	r3, r2
 8002f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f006 f883 	bl	800904e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 82fc 	beq.w	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	82fb      	strh	r3, [r7, #22]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	8afb      	ldrh	r3, [r7, #22]
 8002f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	8013      	strh	r3, [r2, #0]
 8002f94:	e2da      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d021      	beq.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 82ae 	bne.w	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003006:	441a      	add	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d30b      	bcc.n	8003030 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	e017      	b.n	8003060 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003038:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003048:	e00a      	b.n	8003060 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2200      	movs	r2, #0
 800305e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d165      	bne.n	8003134 <HAL_PCD_EP_DB_Transmit+0x382>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307c:	4413      	add	r3, r2
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	011a      	lsls	r2, r3, #4
 8003086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003088:	4413      	add	r3, r2
 800308a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800308e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309a:	b29a      	uxth	r2, r3
 800309c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80030a6:	d91d      	bls.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x332>
 80030a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x310>
 80030bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030be:	3b01      	subs	r3, #1
 80030c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	029b      	lsls	r3, r3, #10
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	e044      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0x350>
 80030ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e035      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800310a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003118:	3301      	adds	r3, #1
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29a      	uxth	r2, r3
 8003122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003124:	b29b      	uxth	r3, r3
 8003126:	029b      	lsls	r3, r3, #10
 8003128:	b29b      	uxth	r3, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	b29a      	uxth	r2, r3
 800312e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	e01c      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d118      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	647b      	str	r3, [r7, #68]	@ 0x44
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003150:	4413      	add	r3, r2
 8003152:	647b      	str	r3, [r7, #68]	@ 0x44
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	011a      	lsls	r2, r3, #4
 800315a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315c:	4413      	add	r3, r2
 800315e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003162:	643b      	str	r3, [r7, #64]	@ 0x40
 8003164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003168:	b29a      	uxth	r2, r3
 800316a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6959      	ldr	r1, [r3, #20]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	891a      	ldrh	r2, [r3, #8]
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800317e:	b29b      	uxth	r3, r3
 8003180:	f004 f921 	bl	80073c6 <USB_WritePMA>
 8003184:	e1e2      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	3306      	adds	r3, #6
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d307      	bcc.n	80031ce <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031c6:	1ad2      	subs	r2, r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	619a      	str	r2, [r3, #24]
 80031cc:	e002      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 80c0 	bne.w	800335e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d126      	bne.n	8003234 <HAL_PCD_EP_DB_Transmit+0x482>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031fa:	4413      	add	r3, r2
 80031fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	011a      	lsls	r2, r3, #4
 8003204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003206:	4413      	add	r3, r2
 8003208:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800320c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800320e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003218:	b29a      	uxth	r2, r3
 800321a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322c:	b29a      	uxth	r2, r3
 800322e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e01a      	b.n	800326a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d116      	bne.n	800326a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	667b      	str	r3, [r7, #100]	@ 0x64
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003250:	4413      	add	r3, r2
 8003252:	667b      	str	r3, [r7, #100]	@ 0x64
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	011a      	lsls	r2, r3, #4
 800325a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800325c:	4413      	add	r3, r2
 800325e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003262:	663b      	str	r3, [r7, #96]	@ 0x60
 8003264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003266:	2200      	movs	r2, #0
 8003268:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	785b      	ldrb	r3, [r3, #1]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12b      	bne.n	80032d0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800328c:	4413      	add	r3, r2
 800328e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	011a      	lsls	r2, r3, #4
 8003296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003298:	4413      	add	r3, r2
 800329a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800329e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	e017      	b.n	8003300 <HAL_PCD_EP_DB_Transmit+0x54e>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d113      	bne.n	8003300 <HAL_PCD_EP_DB_Transmit+0x54e>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e6:	4413      	add	r3, r2
 80032e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	011a      	lsls	r2, r3, #4
 80032f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f2:	4413      	add	r3, r2
 80032f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fc:	2200      	movs	r2, #0
 80032fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f005 fea1 	bl	800904e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 811a 	bne.w	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800332e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003332:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800334c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003358:	b29b      	uxth	r3, r3
 800335a:	8013      	strh	r3, [r2, #0]
 800335c:	e0f6      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d121      	bne.n	80033ac <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003382:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	441a      	add	r2, r3
 8003394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800339c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 80ca 	bne.w	800354c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033c0:	441a      	add	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033ce:	441a      	add	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d30b      	bcc.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f0:	1ad2      	subs	r2, r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	621a      	str	r2, [r3, #32]
 80033f6:	e017      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003400:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003410:	e00a      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	657b      	str	r3, [r7, #84]	@ 0x54
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d165      	bne.n	8003502 <HAL_PCD_EP_DB_Transmit+0x750>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800344a:	4413      	add	r3, r2
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	011a      	lsls	r2, r3, #4
 8003454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003456:	4413      	add	r3, r2
 8003458:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800345c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800345e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003468:	b29a      	uxth	r2, r3
 800346a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003472:	2b3e      	cmp	r3, #62	@ 0x3e
 8003474:	d91d      	bls.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x700>
 8003476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_PCD_EP_DB_Transmit+0x6de>
 800348a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800348c:	3b01      	subs	r3, #1
 800348e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29a      	uxth	r2, r3
 8003496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003498:	b29b      	uxth	r3, r3
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	b29b      	uxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	e041      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x784>
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80034ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	e032      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x784>
 80034d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_PCD_EP_DB_Transmit+0x738>
 80034e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034e6:	3301      	adds	r3, #1
 80034e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	029b      	lsls	r3, r3, #10
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	e019      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x784>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d115      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x784>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003518:	4413      	add	r3, r2
 800351a:	657b      	str	r3, [r7, #84]	@ 0x54
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	011a      	lsls	r2, r3, #4
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	4413      	add	r3, r2
 8003526:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800352a:	653b      	str	r3, [r7, #80]	@ 0x50
 800352c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003530:	b29a      	uxth	r2, r3
 8003532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003534:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6959      	ldr	r1, [r3, #20]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	895a      	ldrh	r2, [r3, #10]
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003546:	b29b      	uxth	r3, r3
 8003548:	f003 ff3d 	bl	80073c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003566:	82bb      	strh	r3, [r7, #20]
 8003568:	8abb      	ldrh	r3, [r7, #20]
 800356a:	f083 0310 	eor.w	r3, r3, #16
 800356e:	82bb      	strh	r3, [r7, #20]
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	f083 0320 	eor.w	r3, r3, #32
 8003576:	82bb      	strh	r3, [r7, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800358c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003598:	b29b      	uxth	r3, r3
 800359a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3790      	adds	r7, #144	@ 0x90
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b087      	sub	sp, #28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
 80035b4:	4613      	mov	r3, r2
 80035b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c4:	897b      	ldrh	r3, [r7, #10]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e009      	b.n	80035f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035dc:	897a      	ldrh	r2, [r7, #10]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	80da      	strh	r2, [r3, #6]
 8003604:	e00b      	b.n	800361e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2201      	movs	r2, #1
 800360a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	b29a      	uxth	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b29a      	uxth	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e272      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800364c:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00c      	beq.n	8003672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003658:	4b8f      	ldr	r3, [pc, #572]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d112      	bne.n	800368a <HAL_RCC_OscConfig+0x5e>
 8003664:	4b8c      	ldr	r3, [pc, #560]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003670:	d10b      	bne.n	800368a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003672:	4b89      	ldr	r3, [pc, #548]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06c      	beq.n	8003758 <HAL_RCC_OscConfig+0x12c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d168      	bne.n	8003758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e24c      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x76>
 8003694:	4b80      	ldr	r3, [pc, #512]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a7f      	ldr	r2, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e02e      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7a      	ldr	r2, [pc, #488]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b78      	ldr	r3, [pc, #480]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a77      	ldr	r2, [pc, #476]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xbc>
 80036ce:	4b72      	ldr	r3, [pc, #456]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a71      	ldr	r2, [pc, #452]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b6f      	ldr	r3, [pc, #444]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b68      	ldr	r3, [pc, #416]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fd fe50 	bl	80013ac <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fd fe4c 	bl	80013ac <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e200      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xe4>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd fe3c 	bl	80013ac <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fd fe38 	bl	80013ac <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1ec      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x10c>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d063      	beq.n	800382e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	4b4c      	ldr	r3, [pc, #304]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003772:	4b49      	ldr	r3, [pc, #292]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x18c>
 800377e:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x176>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1c0      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4939      	ldr	r1, [pc, #228]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e03a      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b36      	ldr	r3, [pc, #216]	@ (800389c <HAL_RCC_OscConfig+0x270>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fd fdf1 	bl	80013ac <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fd fded 	bl	80013ac <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1a1      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4927      	ldr	r1, [pc, #156]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e015      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003802:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x270>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd fdd0 	bl	80013ac <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7fd fdcc 	bl	80013ac <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e180      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d03a      	beq.n	80038b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b17      	ldr	r3, [pc, #92]	@ (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fd fdb0 	bl	80013ac <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fd fdac 	bl	80013ac <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e160      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800386e:	2001      	movs	r0, #1
 8003870:	f000 face 	bl	8003e10 <RCC_Delay>
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387c:	f7fd fd96 	bl	80013ac <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003882:	e00f      	b.n	80038a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003884:	f7fd fd92 	bl	80013ac <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d908      	bls.n	80038a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e146      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	42420000 	.word	0x42420000
 80038a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	4b92      	ldr	r3, [pc, #584]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e9      	bne.n	8003884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a6 	beq.w	8003a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a87      	ldr	r2, [pc, #540]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	61d3      	str	r3, [r2, #28]
 80038da:	4b85      	ldr	r3, [pc, #532]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b7f      	ldr	r3, [pc, #508]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd fd53 	bl	80013ac <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fd fd4f 	bl	80013ac <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	@ 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e103      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b75      	ldr	r3, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x312>
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e02d      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x334>
 8003946:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a69      	ldr	r2, [pc, #420]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6213      	str	r3, [r2, #32]
 8003952:	4b67      	ldr	r3, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4a66      	ldr	r2, [pc, #408]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6213      	str	r3, [r2, #32]
 800395e:	e01c      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x356>
 8003968:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4a60      	ldr	r2, [pc, #384]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6213      	str	r3, [r2, #32]
 8003974:	4b5e      	ldr	r3, [pc, #376]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6213      	str	r3, [r2, #32]
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 8003982:	4b5b      	ldr	r3, [pc, #364]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a5a      	ldr	r2, [pc, #360]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	4b58      	ldr	r3, [pc, #352]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4a57      	ldr	r2, [pc, #348]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fd03 	bl	80013ac <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fcff 	bl	80013ac <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0b1      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ee      	beq.n	80039aa <HAL_RCC_OscConfig+0x37e>
 80039cc:	e014      	b.n	80039f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fced 	bl	80013ac <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd fce9 	bl	80013ac <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e09b      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	4b40      	ldr	r3, [pc, #256]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ee      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b3c      	ldr	r3, [pc, #240]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a3b      	ldr	r2, [pc, #236]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8087 	beq.w	8003b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d061      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d146      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a28:	4b33      	ldr	r3, [pc, #204]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fcbd 	bl	80013ac <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd fcb9 	bl	80013ac <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e06d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a48:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4921      	ldr	r1, [pc, #132]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a19      	ldr	r1, [r3, #32]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	430b      	orrs	r3, r1
 8003a82:	491b      	ldr	r1, [pc, #108]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fd fc8d 	bl	80013ac <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fd fc89 	bl	80013ac <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e03d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46a>
 8003ab4:	e035      	b.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd fc76 	bl	80013ac <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fc72 	bl	80013ac <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e026      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x498>
 8003ae2:	e01e      	b.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e019      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_OscConfig+0x500>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0d0      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d910      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b67      	ldr	r3, [pc, #412]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 0207 	bic.w	r2, r3, #7
 8003b5a:	4965      	ldr	r1, [pc, #404]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a58      	ldr	r2, [pc, #352]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba4:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	494d      	ldr	r1, [pc, #308]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d040      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d115      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e073      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06b      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4936      	ldr	r1, [pc, #216]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7fd fbc4 	bl	80013ac <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fd fbc0 	bl	80013ac <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e053      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b27      	ldr	r3, [pc, #156]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d210      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 0207 	bic.w	r2, r3, #7
 8003c66:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4916      	ldr	r1, [pc, #88]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490e      	ldr	r1, [pc, #56]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cbe:	f000 f821 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	490a      	ldr	r1, [pc, #40]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1cc>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cda:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_ClockConfig+0x1d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fb22 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	080097bc 	.word	0x080097bc
 8003cfc:	20000008 	.word	0x20000008
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x30>
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x36>
 8003d32:	e027      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d36:	613b      	str	r3, [r7, #16]
      break;
 8003d38:	e027      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	0c9b      	lsrs	r3, r3, #18
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	4a11      	ldr	r2, [pc, #68]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d66:	fb03 f202 	mul.w	r2, r3, r2
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e004      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	613b      	str	r3, [r7, #16]
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d86:	613b      	str	r3, [r7, #16]
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	693b      	ldr	r3, [r7, #16]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	080097d4 	.word	0x080097d4
 8003da4:	080097e4 	.word	0x080097e4
 8003da8:	003d0900 	.word	0x003d0900

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b02      	ldr	r3, [pc, #8]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	20000008 	.word	0x20000008

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff2 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	080097cc 	.word	0x080097cc

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffde 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0adb      	lsrs	r3, r3, #11
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	080097cc 	.word	0x080097cc

08003e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <RCC_Delay+0x34>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <RCC_Delay+0x38>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0a5b      	lsrs	r3, r3, #9
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e2c:	bf00      	nop
  }
  while (Delay --);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	60fa      	str	r2, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <RCC_Delay+0x1c>
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	20000008 	.word	0x20000008
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d07d      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10d      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4b4c      	ldr	r3, [pc, #304]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	61d3      	str	r3, [r2, #28]
 8003e84:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b46      	ldr	r3, [pc, #280]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d118      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eac:	f7fd fa7e 	bl	80013ac <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fd fa7a 	bl	80013ac <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e06d      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed2:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02e      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d027      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efa:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f00:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f06:	4a29      	ldr	r2, [pc, #164]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fd fa49 	bl	80013ac <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fa45 	bl	80013ac <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e036      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f40:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4917      	ldr	r1, [pc, #92]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f70:	4b0e      	ldr	r3, [pc, #56]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	490b      	ldr	r1, [pc, #44]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4904      	ldr	r1, [pc, #16]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42420440 	.word	0x42420440

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e042      	b.n	8004050 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd f886 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	@ 0x24
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fe4d 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	d16d      	bne.n	8004154 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Transmit+0x2c>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e066      	b.n	8004156 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2221      	movs	r2, #33	@ 0x21
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fd f989 	bl	80013ac <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b0:	d108      	bne.n	80040c4 <HAL_UART_Transmit+0x6c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e003      	b.n	80040cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040cc:	e02a      	b.n	8004124 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	@ 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fb9d 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e036      	b.n	8004156 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	3302      	adds	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e007      	b.n	8004116 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1cf      	bne.n	80040ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2140      	movs	r1, #64	@ 0x40
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fb6d 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e006      	b.n	8004156 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	@ 0x28
 8004162:	af02      	add	r7, sp, #8
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b20      	cmp	r3, #32
 800417c:	d17c      	bne.n	8004278 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_UART_Receive+0x2c>
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e075      	b.n	800427a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2222      	movs	r2, #34	@ 0x22
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a2:	f7fd f903 	bl	80013ac <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041bc:	d108      	bne.n	80041d0 <HAL_UART_Receive+0x72>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e003      	b.n	80041d8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041d8:	e043      	b.n	8004262 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2120      	movs	r1, #32
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fb17 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e042      	b.n	800427a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	b29a      	uxth	r2, r3
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3302      	adds	r3, #2
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e01f      	b.n	8004254 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421c:	d007      	beq.n	800422e <HAL_UART_Receive+0xd0>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_UART_Receive+0xde>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e008      	b.n	800424e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1b6      	bne.n	80041da <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	4613      	mov	r3, r2
 800428e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	d112      	bne.n	80042c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_UART_Receive_IT+0x26>
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00b      	b.n	80042c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	461a      	mov	r2, r3
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fb1b 	bl	80048f4 <UART_Start_Receive_IT>
 80042be:	4603      	mov	r3, r0
 80042c0:	e000      	b.n	80042c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b0ba      	sub	sp, #232	@ 0xe8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800430a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_UART_IRQHandler+0x66>
 800431e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fbf8 	bl	8004b20 <UART_Receive_IT>
      return;
 8004330:	e25b      	b.n	80047ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80de 	beq.w	80044f8 <HAL_UART_IRQHandler+0x22c>
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80d1 	beq.w	80044f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0xae>
 8004362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xd2>
 8004386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xf6>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_UART_IRQHandler+0x126>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	f043 0208 	orr.w	r2, r3, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 81f2 	beq.w	80047e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_UART_IRQHandler+0x14e>
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fb83 	bl	8004b20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_UART_IRQHandler+0x17a>
 800443e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d04f      	beq.n	80044e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa8d 	bl	8004966 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d041      	beq.n	80044de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800448a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800449e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1d9      	bne.n	800445a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d013      	beq.n	80044d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ac <HAL_UART_IRQHandler+0x3e0>)
 80044b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd f8ec 	bl	8001698 <HAL_DMA_Abort_IT>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e00e      	b.n	80044f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fdc0 	bl	800105c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e00a      	b.n	80044f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fc fdbc 	bl	800105c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e006      	b.n	80044f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc fdb8 	bl	800105c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044f2:	e175      	b.n	80047e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	bf00      	nop
    return;
 80044f6:	e173      	b.n	80047e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	f040 814f 	bne.w	80047a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8148 	beq.w	80047a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8141 	beq.w	80047a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80b6 	beq.w	80046b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8145 	beq.w	80047e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800455e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004562:	429a      	cmp	r2, r3
 8004564:	f080 813e 	bcs.w	80047e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800456e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b20      	cmp	r3, #32
 8004578:	f000 8088 	beq.w	800468c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004592:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800459a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1d9      	bne.n	800457c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3314      	adds	r3, #20
 80045e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e1      	bne.n	80045c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800461a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004628:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800462a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800462e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e3      	bne.n	8004604 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800465a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800466e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004670:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004674:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800467c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e3      	bne.n	800464a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc ffcb 	bl	8001622 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800469a:	b29b      	uxth	r3, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ad 	bl	8004802 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a8:	e09c      	b.n	80047e4 <HAL_UART_IRQHandler+0x518>
 80046aa:	bf00      	nop
 80046ac:	08004a2b 	.word	0x08004a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 808e 	beq.w	80047e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8089 	beq.w	80047e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80046fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e3      	bne.n	80046d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	623b      	str	r3, [r7, #32]
   return(result);
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3314      	adds	r3, #20
 800472e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004732:	633a      	str	r2, [r7, #48]	@ 0x30
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e3      	bne.n	800470e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	60fb      	str	r3, [r7, #12]
   return(result);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0310 	bic.w	r3, r3, #16
 800476a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004778:	61fa      	str	r2, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	617b      	str	r3, [r7, #20]
   return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e3      	bne.n	8004754 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f832 	bl	8004802 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800479e:	e023      	b.n	80047e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_UART_IRQHandler+0x4f4>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f94a 	bl	8004a52 <UART_Transmit_IT>
    return;
 80047be:	e014      	b.n	80047ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <HAL_UART_IRQHandler+0x51e>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f989 	bl	8004af0 <UART_EndTransmit_IT>
    return;
 80047de:	e004      	b.n	80047ea <HAL_UART_IRQHandler+0x51e>
    return;
 80047e0:	bf00      	nop
 80047e2:	e002      	b.n	80047ea <HAL_UART_IRQHandler+0x51e>
      return;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_UART_IRQHandler+0x51e>
      return;
 80047e8:	bf00      	nop
  }
}
 80047ea:	37e8      	adds	r7, #232	@ 0xe8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	@ 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	e050      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d04c      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x30>
 8004838:	f7fc fdb8 	bl	80013ac <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004844:	429a      	cmp	r2, r3
 8004846:	d241      	bcs.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004868:	637a      	str	r2, [r7, #52]	@ 0x34
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800486e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800489c:	623a      	str	r2, [r7, #32]
 800489e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	69f9      	ldr	r1, [r7, #28]
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d09f      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3740      	adds	r7, #64	@ 0x40
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2222      	movs	r2, #34	@ 0x22
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004938:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0220 	orr.w	r2, r2, #32
 8004958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b095      	sub	sp, #84	@ 0x54
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800498e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d119      	bne.n	8004a12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049fe:	61ba      	str	r2, [r7, #24]
 8004a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6979      	ldr	r1, [r7, #20]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a20:	bf00      	nop
 8004a22:	3754      	adds	r7, #84	@ 0x54
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7fc fb09 	bl	800105c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b21      	cmp	r3, #33	@ 0x21
 8004a64:	d13e      	bne.n	8004ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	d114      	bne.n	8004a9a <UART_Transmit_IT+0x48>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d110      	bne.n	8004a9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1c9a      	adds	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]
 8004a98:	e008      	b.n	8004aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6211      	str	r1, [r2, #32]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fe6d 	bl	80047f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	@ 0x30
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b22      	cmp	r3, #34	@ 0x22
 8004b32:	f040 80ae 	bne.w	8004c92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3e:	d117      	bne.n	8004b70 <UART_Receive_IT+0x50>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d113      	bne.n	8004b70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b6e:	e026      	b.n	8004bbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b82:	d007      	beq.n	8004b94 <UART_Receive_IT+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <UART_Receive_IT+0x82>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e008      	b.n	8004bb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d15d      	bne.n	8004c8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0220 	bic.w	r2, r2, #32
 8004be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d135      	bne.n	8004c84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f023 0310 	bic.w	r3, r3, #16
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3e:	623a      	str	r2, [r7, #32]
 8004c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d10a      	bne.n	8004c76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff fdc0 	bl	8004802 <HAL_UARTEx_RxEventCallback>
 8004c82:	e002      	b.n	8004c8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fc f9cd 	bl	8001024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e002      	b.n	8004c94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3730      	adds	r7, #48	@ 0x30
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cd6:	f023 030c 	bic.w	r3, r3, #12
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8004db0 <UART_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7ff f870 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	e002      	b.n	8004d12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7ff f858 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8004d10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009a      	lsls	r2, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	4a22      	ldr	r2, [pc, #136]	@ (8004db4 <UART_SetConfig+0x118>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	0119      	lsls	r1, r3, #4
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009a      	lsls	r2, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d48:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <UART_SetConfig+0x118>)
 8004d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2064      	movs	r0, #100	@ 0x64
 8004d52:	fb00 f303 	mul.w	r3, r0, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	@ 0x32
 8004d5c:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <UART_SetConfig+0x118>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d68:	4419      	add	r1, r3
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009a      	lsls	r2, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <UART_SetConfig+0x118>)
 8004d82:	fba3 0302 	umull	r0, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2064      	movs	r0, #100	@ 0x64
 8004d8a:	fb00 f303 	mul.w	r3, r0, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	@ 0x32
 8004d94:	4a07      	ldr	r2, [pc, #28]	@ (8004db4 <UART_SetConfig+0x118>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	440a      	add	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40013800 	.word	0x40013800
 8004db4:	51eb851f 	.word	0x51eb851f

08004db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004db8:	b084      	sub	sp, #16
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	f107 0014 	add.w	r0, r7, #20
 8004dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr

08004dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004de8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004dec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e0c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e50:	b084      	sub	sp, #16
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	f107 0014 	add.w	r0, r7, #20
 8004e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	b004      	add	sp, #16
 8004e8e:	4770      	bx	lr

08004e90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b09d      	sub	sp, #116	@ 0x74
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	78db      	ldrb	r3, [r3, #3]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d81f      	bhi.n	8004f02 <USB_ActivateEndpoint+0x72>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <USB_ActivateEndpoint+0x38>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004ed9 	.word	0x08004ed9
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004f0b 	.word	0x08004f0b
 8004ed4:	08004ee7 	.word	0x08004ee7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ed8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004edc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ee0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ee4:	e012      	b.n	8004f0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ee6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004eea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004eee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ef2:	e00b      	b.n	8004f0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ef4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f00:	e004      	b.n	8004f0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004f08:	e000      	b.n	8004f0c <USB_ActivateEndpoint+0x7c>
      break;
 8004f0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	7b1b      	ldrb	r3, [r3, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f040 8178 	bne.w	800526c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8084 	beq.w	800508e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	88db      	ldrh	r3, [r3, #6]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	827b      	strh	r3, [r7, #18]
 8004fc8:	8a7b      	ldrh	r3, [r7, #18]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <USB_ActivateEndpoint+0x17a>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe8:	823b      	strh	r3, [r7, #16]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8a3b      	ldrh	r3, [r7, #16]
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005002:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	78db      	ldrb	r3, [r3, #3]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d020      	beq.n	8005054 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005028:	81bb      	strh	r3, [r7, #12]
 800502a:	89bb      	ldrh	r3, [r7, #12]
 800502c:	f083 0320 	eor.w	r3, r3, #32
 8005030:	81bb      	strh	r3, [r7, #12]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	89bb      	ldrh	r3, [r7, #12]
 800503e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800504a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]
 8005052:	e2d5      	b.n	8005600 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800506a:	81fb      	strh	r3, [r7, #14]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	89fb      	ldrh	r3, [r7, #14]
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
 800508c:	e2b8      	b.n	8005600 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	4413      	add	r3, r2
 80050a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	011a      	lsls	r2, r3, #4
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	88db      	ldrh	r3, [r3, #6]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	4413      	add	r3, r2
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050de:	4413      	add	r3, r2
 80050e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80050fc:	d91d      	bls.n	800513a <USB_ActivateEndpoint+0x2aa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <USB_ActivateEndpoint+0x288>
 8005112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005114:	3b01      	subs	r3, #1
 8005116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29a      	uxth	r2, r3
 800511e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005120:	b29b      	uxth	r3, r3
 8005122:	029b      	lsls	r3, r3, #10
 8005124:	b29b      	uxth	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005132:	b29a      	uxth	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e026      	b.n	8005188 <USB_ActivateEndpoint+0x2f8>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <USB_ActivateEndpoint+0x2c8>
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e017      	b.n	8005188 <USB_ActivateEndpoint+0x2f8>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <USB_ActivateEndpoint+0x2e2>
 800516c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800516e:	3301      	adds	r3, #1
 8005170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29a      	uxth	r2, r3
 8005178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800517a:	b29b      	uxth	r3, r3
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	b29b      	uxth	r3, r3
 8005180:	4313      	orrs	r3, r2
 8005182:	b29a      	uxth	r2, r3
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005196:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01b      	beq.n	80051d8 <USB_ActivateEndpoint+0x348>
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b6:	843b      	strh	r3, [r7, #32]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	8c3b      	ldrh	r3, [r7, #32]
 80051c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d124      	bne.n	800522a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	83bb      	strh	r3, [r7, #28]
 80051f8:	8bbb      	ldrh	r3, [r7, #28]
 80051fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051fe:	83bb      	strh	r3, [r7, #28]
 8005200:	8bbb      	ldrh	r3, [r7, #28]
 8005202:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005206:	83bb      	strh	r3, [r7, #28]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	8bbb      	ldrh	r3, [r7, #28]
 8005214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800521c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]
 8005228:	e1ea      	b.n	8005600 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800523c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005240:	83fb      	strh	r3, [r7, #30]
 8005242:	8bfb      	ldrh	r3, [r7, #30]
 8005244:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005248:	83fb      	strh	r3, [r7, #30]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800525e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
 800526a:	e1c9      	b.n	8005600 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	78db      	ldrb	r3, [r3, #3]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d11e      	bne.n	80052b2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80052a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
 80052b0:	e01d      	b.n	80052ee <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80052c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052fe:	4413      	add	r3, r2
 8005300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	011a      	lsls	r2, r3, #4
 8005308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800530a:	4413      	add	r3, r2
 800530c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005310:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	891b      	ldrh	r3, [r3, #8]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	657b      	str	r3, [r7, #84]	@ 0x54
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005332:	4413      	add	r3, r2
 8005334:	657b      	str	r3, [r7, #84]	@ 0x54
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	011a      	lsls	r2, r3, #4
 800533c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533e:	4413      	add	r3, r2
 8005340:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005344:	653b      	str	r3, [r7, #80]	@ 0x50
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	895b      	ldrh	r3, [r3, #10]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005354:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f040 8093 	bne.w	8005486 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <USB_ActivateEndpoint+0x524>
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005392:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80053c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <USB_ActivateEndpoint+0x574>
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800541c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800541e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005422:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005424:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005426:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800542a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005462:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]
 8005484:	e0bc      	b.n	8005600 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005496:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800549a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01d      	beq.n	80054de <USB_ActivateEndpoint+0x64e>
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80054ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01d      	beq.n	8005536 <USB_ActivateEndpoint+0x6a6>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005510:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800552e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005532:	b29b      	uxth	r3, r3
 8005534:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	78db      	ldrb	r3, [r3, #3]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d024      	beq.n	8005588 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005554:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800555c:	f083 0320 	eor.w	r3, r3, #32
 8005560:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
 8005586:	e01d      	b.n	80055c4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800559e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005600:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005604:	4618      	mov	r0, r3
 8005606:	3774      	adds	r7, #116	@ 0x74
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop

08005610 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005610:	b480      	push	{r7}
 8005612:	b08d      	sub	sp, #52	@ 0x34
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	7b1b      	ldrb	r3, [r3, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 808e 	bne.w	8005740 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d044      	beq.n	80056b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	81bb      	strh	r3, [r7, #12]
 800563a:	89bb      	ldrh	r3, [r7, #12]
 800563c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <USB_DeactivateEndpoint+0x6c>
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	817b      	strh	r3, [r7, #10]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005674:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800568e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005692:	813b      	strh	r3, [r7, #8]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]
 80056b4:	e192      	b.n	80059dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	827b      	strh	r3, [r7, #18]
 80056c4:	8a7b      	ldrh	r3, [r7, #18]
 80056c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01b      	beq.n	8005706 <USB_DeactivateEndpoint+0xf6>
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e4:	823b      	strh	r3, [r7, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8a3b      	ldrh	r3, [r7, #16]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	81fb      	strh	r3, [r7, #14]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	89fb      	ldrh	r3, [r7, #14]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e14d      	b.n	80059dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f040 80a5 	bne.w	8005894 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	843b      	strh	r3, [r7, #32]
 8005758:	8c3b      	ldrh	r3, [r7, #32]
 800575a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d01b      	beq.n	800579a <USB_DeactivateEndpoint+0x18a>
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005778:	83fb      	strh	r3, [r7, #30]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	8bfb      	ldrh	r3, [r7, #30]
 8005786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800578a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	b29b      	uxth	r3, r3
 8005798:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	83bb      	strh	r3, [r7, #28]
 80057a8:	8bbb      	ldrh	r3, [r7, #28]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01b      	beq.n	80057ea <USB_DeactivateEndpoint+0x1da>
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c8:	837b      	strh	r3, [r7, #26]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	8b7b      	ldrh	r3, [r7, #26]
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005800:	833b      	strh	r3, [r7, #24]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	441a      	add	r2, r3
 800580c:	8b3b      	ldrh	r3, [r7, #24]
 800580e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	82fb      	strh	r3, [r7, #22]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8afb      	ldrh	r3, [r7, #22]
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005870:	82bb      	strh	r3, [r7, #20]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	8abb      	ldrh	r3, [r7, #20]
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
 8005892:	e0a3      	b.n	80059dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01b      	beq.n	80058e4 <USB_DeactivateEndpoint+0x2d4>
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80058f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01b      	beq.n	8005934 <USB_DeactivateEndpoint+0x324>
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	441a      	add	r2, r3
 800591e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800592c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005930:	b29b      	uxth	r3, r3
 8005932:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800595c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005968:	b29b      	uxth	r3, r3
 800596a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005982:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3734      	adds	r7, #52	@ 0x34
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b0c2      	sub	sp, #264	@ 0x108
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f6:	6018      	str	r0, [r3, #0]
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a00:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f040 86b7 	bne.w	8006782 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d908      	bls.n	8005a42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a40:	e007      	b.n	8005a52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	7b1b      	ldrb	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d13a      	bne.n	8005ad8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	88da      	ldrh	r2, [r3, #6]
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a88:	6800      	ldr	r0, [r0, #0]
 8005a8a:	f001 fc9c 	bl	80073c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	011a      	lsls	r2, r3, #4
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	f000 be1f 	b.w	8006716 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f040 8462 	bne.w	80063ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f240 83df 	bls.w	80062c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b58:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 81c7 	beq.w	8005f38 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d177      	bne.n	8005cb6 <USB_EPStartXfer+0x2ce>
 8005bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	4413      	add	r3, r2
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	011a      	lsls	r2, r3, #4
 8005bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c18:	d921      	bls.n	8005c5e <USB_EPStartXfer+0x276>
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <USB_EPStartXfer+0x252>
 8005c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c34:	3b01      	subs	r3, #1
 8005c36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e050      	b.n	8005d00 <USB_EPStartXfer+0x318>
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <USB_EPStartXfer+0x294>
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	e041      	b.n	8005d00 <USB_EPStartXfer+0x318>
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <USB_EPStartXfer+0x2b4>
 8005c92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c96:	3301      	adds	r3, #1
 8005c98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e024      	b.n	8005d00 <USB_EPStartXfer+0x318>
 8005cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11c      	bne.n	8005d00 <USB_EPStartXfer+0x318>
 8005cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	4413      	add	r3, r2
 8005cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	895b      	ldrh	r3, [r3, #10]
 8005d0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6959      	ldr	r1, [r3, #20]
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d2e:	6800      	ldr	r0, [r0, #0]
 8005d30:	f001 fb49 	bl	80073c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	441a      	add	r2, r3
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6a1a      	ldr	r2, [r3, #32]
 8005d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90f      	bls.n	8005d8e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	621a      	str	r2, [r3, #32]
 8005d8c:	e00e      	b.n	8005dac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d177      	bne.n	8005eac <USB_EPStartXfer+0x4c4>
 8005dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	011a      	lsls	r2, r3, #4
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	4413      	add	r3, r2
 8005df2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e0e:	d921      	bls.n	8005e54 <USB_EPStartXfer+0x46c>
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <USB_EPStartXfer+0x448>
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e056      	b.n	8005f02 <USB_EPStartXfer+0x51a>
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <USB_EPStartXfer+0x48a>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e047      	b.n	8005f02 <USB_EPStartXfer+0x51a>
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <USB_EPStartXfer+0x4aa>
 8005e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e02a      	b.n	8005f02 <USB_EPStartXfer+0x51a>
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d122      	bne.n	8005f02 <USB_EPStartXfer+0x51a>
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	4413      	add	r3, r2
 8005ede:	623b      	str	r3, [r7, #32]
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	011a      	lsls	r2, r3, #4
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	891b      	ldrh	r3, [r3, #8]
 8005f0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6959      	ldr	r1, [r3, #20]
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f30:	6800      	ldr	r0, [r0, #0]
 8005f32:	f001 fa48 	bl	80073c6 <USB_WritePMA>
 8005f36:	e3ee      	b.n	8006716 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d177      	bne.n	8006038 <USB_EPStartXfer+0x650>
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f68:	4413      	add	r3, r2
 8005f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f9a:	d921      	bls.n	8005fe0 <USB_EPStartXfer+0x5f8>
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <USB_EPStartXfer+0x5d4>
 8005fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e056      	b.n	800608e <USB_EPStartXfer+0x6a6>
 8005fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <USB_EPStartXfer+0x616>
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e047      	b.n	800608e <USB_EPStartXfer+0x6a6>
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <USB_EPStartXfer+0x636>
 8006014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006018:	3301      	adds	r3, #1
 800601a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800601e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29a      	uxth	r2, r3
 8006024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006028:	b29b      	uxth	r3, r3
 800602a:	029b      	lsls	r3, r3, #10
 800602c:	b29b      	uxth	r3, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	b29a      	uxth	r2, r3
 8006032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e02a      	b.n	800608e <USB_EPStartXfer+0x6a6>
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d122      	bne.n	800608e <USB_EPStartXfer+0x6a6>
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	653b      	str	r3, [r7, #80]	@ 0x50
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006068:	4413      	add	r3, r2
 800606a:	653b      	str	r3, [r7, #80]	@ 0x50
 800606c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	011a      	lsls	r2, r3, #4
 800607a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800607c:	4413      	add	r3, r2
 800607e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006088:	b29a      	uxth	r2, r3
 800608a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	891b      	ldrh	r3, [r3, #8]
 800609a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800609e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6959      	ldr	r1, [r3, #20]
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f001 f982 	bl	80073c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695a      	ldr	r2, [r3, #20]
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d2:	441a      	add	r2, r3
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d90f      	bls.n	800611c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6a1a      	ldr	r2, [r3, #32]
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	1ad2      	subs	r2, r2, r3
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	621a      	str	r2, [r3, #32]
 800611a:	e00e      	b.n	800613a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	643b      	str	r3, [r7, #64]	@ 0x40
 8006146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d177      	bne.n	8006246 <USB_EPStartXfer+0x85e>
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006170:	b29b      	uxth	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	4413      	add	r3, r2
 8006178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	011a      	lsls	r2, r3, #4
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	4413      	add	r3, r2
 800618c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006190:	637b      	str	r3, [r7, #52]	@ 0x34
 8006192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800619c:	b29a      	uxth	r2, r3
 800619e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80061a8:	d921      	bls.n	80061ee <USB_EPStartXfer+0x806>
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_EPStartXfer+0x7e2>
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4313      	orrs	r3, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e050      	b.n	8006290 <USB_EPStartXfer+0x8a8>
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <USB_EPStartXfer+0x824>
 80061f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e041      	b.n	8006290 <USB_EPStartXfer+0x8a8>
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <USB_EPStartXfer+0x844>
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	3301      	adds	r3, #1
 8006228:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29a      	uxth	r2, r3
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	b29b      	uxth	r3, r3
 8006238:	029b      	lsls	r3, r3, #10
 800623a:	b29b      	uxth	r3, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	b29a      	uxth	r2, r3
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e024      	b.n	8006290 <USB_EPStartXfer+0x8a8>
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11c      	bne.n	8006290 <USB_EPStartXfer+0x8a8>
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626a:	4413      	add	r3, r2
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627e:	4413      	add	r3, r2
 8006280:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	b29a      	uxth	r2, r3
 800628c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	895b      	ldrh	r3, [r3, #10]
 800629c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6959      	ldr	r1, [r3, #20]
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	f001 f881 	bl	80073c6 <USB_WritePMA>
 80062c4:	e227      	b.n	8006716 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006352:	4413      	add	r3, r2
 8006354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	011a      	lsls	r2, r3, #4
 8006364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006366:	4413      	add	r3, r2
 8006368:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800636c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006372:	b29a      	uxth	r2, r3
 8006374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006376:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	891b      	ldrh	r3, [r3, #8]
 8006384:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6959      	ldr	r1, [r3, #20]
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	b29b      	uxth	r3, r3
 800639a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800639e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	f001 f80d 	bl	80073c6 <USB_WritePMA>
 80063ac:	e1b3      	b.n	8006716 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a1a      	ldr	r2, [r3, #32]
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80c6 	beq.w	8006580 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d177      	bne.n	8006500 <USB_EPStartXfer+0xb18>
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006430:	4413      	add	r3, r2
 8006432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006444:	4413      	add	r3, r2
 8006446:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800644a:	667b      	str	r3, [r7, #100]	@ 0x64
 800644c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006456:	b29a      	uxth	r2, r3
 8006458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	2b3e      	cmp	r3, #62	@ 0x3e
 8006462:	d921      	bls.n	80064a8 <USB_EPStartXfer+0xac0>
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <USB_EPStartXfer+0xa9c>
 800647a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800647e:	3b01      	subs	r3, #1
 8006480:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	4313      	orrs	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e050      	b.n	800654a <USB_EPStartXfer+0xb62>
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <USB_EPStartXfer+0xade>
 80064b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e041      	b.n	800654a <USB_EPStartXfer+0xb62>
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <USB_EPStartXfer+0xafe>
 80064dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064e0:	3301      	adds	r3, #1
 80064e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	029b      	lsls	r3, r3, #10
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e024      	b.n	800654a <USB_EPStartXfer+0xb62>
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d11c      	bne.n	800654a <USB_EPStartXfer+0xb62>
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006524:	4413      	add	r3, r2
 8006526:	673b      	str	r3, [r7, #112]	@ 0x70
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	011a      	lsls	r2, r3, #4
 8006536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006538:	4413      	add	r3, r2
 800653a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800653e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	b29a      	uxth	r2, r3
 8006546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006548:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800654a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	895b      	ldrh	r3, [r3, #10]
 8006556:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800655a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6959      	ldr	r1, [r3, #20]
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	b29b      	uxth	r3, r3
 800656c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006570:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006574:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006578:	6800      	ldr	r0, [r0, #0]
 800657a:	f000 ff24 	bl	80073c6 <USB_WritePMA>
 800657e:	e0ca      	b.n	8006716 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d177      	bne.n	8006680 <USB_EPStartXfer+0xc98>
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800659c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065b0:	4413      	add	r3, r2
 80065b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	011a      	lsls	r2, r3, #4
 80065c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e2:	d921      	bls.n	8006628 <USB_EPStartXfer+0xc40>
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USB_EPStartXfer+0xc1c>
 80065fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065fe:	3b01      	subs	r3, #1
 8006600:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800660e:	b29b      	uxth	r3, r3
 8006610:	029b      	lsls	r3, r3, #10
 8006612:	b29b      	uxth	r3, r3
 8006614:	4313      	orrs	r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006620:	b29a      	uxth	r2, r3
 8006622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e05c      	b.n	80066e2 <USB_EPStartXfer+0xcfa>
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <USB_EPStartXfer+0xc5e>
 8006630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663e:	b29a      	uxth	r2, r3
 8006640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e04d      	b.n	80066e2 <USB_EPStartXfer+0xcfa>
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <USB_EPStartXfer+0xc7e>
 800665c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006660:	3301      	adds	r3, #1
 8006662:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006670:	b29b      	uxth	r3, r3
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	b29b      	uxth	r3, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	b29a      	uxth	r2, r3
 800667a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e030      	b.n	80066e2 <USB_EPStartXfer+0xcfa>
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d128      	bne.n	80066e2 <USB_EPStartXfer+0xcfa>
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066b4:	4413      	add	r3, r2
 80066b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	011a      	lsls	r2, r3, #4
 80066c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	891b      	ldrh	r3, [r3, #8]
 80066ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6959      	ldr	r1, [r3, #20]
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	b29b      	uxth	r3, r3
 8006704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006708:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800670c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006710:	6800      	ldr	r0, [r0, #0]
 8006712:	f000 fe58 	bl	80073c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673c:	817b      	strh	r3, [r7, #10]
 800673e:	897b      	ldrh	r3, [r7, #10]
 8006740:	f083 0310 	eor.w	r3, r3, #16
 8006744:	817b      	strh	r3, [r7, #10]
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	f083 0320 	eor.w	r3, r3, #32
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	897b      	ldrh	r3, [r7, #10]
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
 800677e:	f000 bcde 	b.w	800713e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	7b1b      	ldrb	r3, [r3, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 80bb 	bne.w	800690a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d917      	bls.n	80067e0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	619a      	str	r2, [r3, #24]
 80067de:	e00e      	b.n	80067fe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800680c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006822:	4413      	add	r3, r2
 8006824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	011a      	lsls	r2, r3, #4
 8006836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800683a:	4413      	add	r3, r2
 800683c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006850:	b29a      	uxth	r2, r3
 8006852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	2b3e      	cmp	r3, #62	@ 0x3e
 800685e:	d924      	bls.n	80068aa <USB_EPStartXfer+0xec2>
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <USB_EPStartXfer+0xe98>
 8006876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800687a:	3b01      	subs	r3, #1
 800687c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29a      	uxth	r2, r3
 8006888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800688c:	b29b      	uxth	r3, r3
 800688e:	029b      	lsls	r3, r3, #10
 8006890:	b29b      	uxth	r3, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	b29b      	uxth	r3, r3
 8006896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	f000 bc10 	b.w	80070ca <USB_EPStartXfer+0x16e2>
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10c      	bne.n	80068cc <USB_EPStartXfer+0xee4>
 80068b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	e3fe      	b.n	80070ca <USB_EPStartXfer+0x16e2>
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <USB_EPStartXfer+0xf04>
 80068e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068e6:	3301      	adds	r3, #1
 80068e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	029b      	lsls	r3, r3, #10
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e3df      	b.n	80070ca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	78db      	ldrb	r3, [r3, #3]
 8006916:	2b02      	cmp	r3, #2
 8006918:	f040 8218 	bne.w	8006d4c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 809d 	bne.w	8006a68 <USB_EPStartXfer+0x1080>
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006952:	4413      	add	r3, r2
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800696a:	4413      	add	r3, r2
 800696c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b3e      	cmp	r3, #62	@ 0x3e
 8006996:	d92b      	bls.n	80069f0 <USB_EPStartXfer+0x1008>
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <USB_EPStartXfer+0xfe0>
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c2:	3b01      	subs	r3, #1
 80069c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	029b      	lsls	r3, r3, #10
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4313      	orrs	r3, r2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e070      	b.n	8006ad2 <USB_EPStartXfer+0x10ea>
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10c      	bne.n	8006a1a <USB_EPStartXfer+0x1032>
 8006a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e05b      	b.n	8006ad2 <USB_EPStartXfer+0x10ea>
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <USB_EPStartXfer+0x1062>
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a44:	3301      	adds	r3, #1
 8006a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	029b      	lsls	r3, r3, #10
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e034      	b.n	8006ad2 <USB_EPStartXfer+0x10ea>
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d12c      	bne.n	8006ad2 <USB_EPStartXfer+0x10ea>
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	011a      	lsls	r2, r3, #4
 8006ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 809d 	bne.w	8006c2c <USB_EPStartXfer+0x1244>
 8006af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b16:	4413      	add	r3, r2
 8006b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	011a      	lsls	r2, r3, #4
 8006b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b2e:	4413      	add	r3, r2
 8006b30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b5a:	d92b      	bls.n	8006bb4 <USB_EPStartXfer+0x11cc>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <USB_EPStartXfer+0x11a4>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b86:	3b01      	subs	r3, #1
 8006b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	e069      	b.n	8006c88 <USB_EPStartXfer+0x12a0>
 8006bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10c      	bne.n	8006bde <USB_EPStartXfer+0x11f6>
 8006bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e054      	b.n	8006c88 <USB_EPStartXfer+0x12a0>
 8006bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <USB_EPStartXfer+0x1226>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e02d      	b.n	8006c88 <USB_EPStartXfer+0x12a0>
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d125      	bne.n	8006c88 <USB_EPStartXfer+0x12a0>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c52:	4413      	add	r3, r2
 8006c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	011a      	lsls	r2, r3, #4
 8006c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c86:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8218 	beq.w	80070ca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <USB_EPStartXfer+0x12ea>
 8006cc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 81f5 	bne.w	80070ca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ce0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 81ee 	bne.w	80070ca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
 8006d4a:	e1be      	b.n	80070ca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 81b4 	bne.w	80070c6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d917      	bls.n	8006daa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	619a      	str	r2, [r3, #24]
 8006da8:	e00e      	b.n	8006dc8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 8085 	bne.w	8006ee4 <USB_EPStartXfer+0x14fc>
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dfe:	4413      	add	r3, r2
 8006e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e16:	4413      	add	r3, r2
 8006e18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e3a:	d923      	bls.n	8006e84 <USB_EPStartXfer+0x149c>
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <USB_EPStartXfer+0x1474>
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	029b      	lsls	r3, r3, #10
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e060      	b.n	8006f46 <USB_EPStartXfer+0x155e>
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <USB_EPStartXfer+0x14be>
 8006e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e04f      	b.n	8006f46 <USB_EPStartXfer+0x155e>
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <USB_EPStartXfer+0x14de>
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e030      	b.n	8006f46 <USB_EPStartXfer+0x155e>
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d128      	bne.n	8006f46 <USB_EPStartXfer+0x155e>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f18:	4413      	add	r3, r2
 8006f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	011a      	lsls	r2, r3, #4
 8006f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f30:	4413      	add	r3, r2
 8006f32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8085 	bne.w	8007070 <USB_EPStartXfer+0x1688>
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	011a      	lsls	r2, r3, #4
 8006f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fc6:	d923      	bls.n	8007010 <USB_EPStartXfer+0x1628>
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <USB_EPStartXfer+0x1600>
 8006fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	029b      	lsls	r3, r3, #10
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007006:	b29a      	uxth	r2, r3
 8007008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	e05c      	b.n	80070ca <USB_EPStartXfer+0x16e2>
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10c      	bne.n	8007032 <USB_EPStartXfer+0x164a>
 8007018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e04b      	b.n	80070ca <USB_EPStartXfer+0x16e2>
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <USB_EPStartXfer+0x166a>
 8007048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704c:	3301      	adds	r3, #1
 800704e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29b      	uxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e02c      	b.n	80070ca <USB_EPStartXfer+0x16e2>
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d124      	bne.n	80070ca <USB_EPStartXfer+0x16e2>
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007096:	4413      	add	r3, r2
 8007098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	011a      	lsls	r2, r3, #4
 80070aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070bc:	b29a      	uxth	r2, r3
 80070be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e001      	b.n	80070ca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e03a      	b.n	8007140 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007104:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007108:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d020      	beq.n	800719e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800716e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007172:	81bb      	strh	r3, [r7, #12]
 8007174:	89bb      	ldrh	r3, [r7, #12]
 8007176:	f083 0310 	eor.w	r3, r3, #16
 800717a:	81bb      	strh	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	89bb      	ldrh	r3, [r7, #12]
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]
 800719c:	e01f      	b.n	80071de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b4:	81fb      	strh	r3, [r7, #14]
 80071b6:	89fb      	ldrh	r3, [r7, #14]
 80071b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071bc:	81fb      	strh	r3, [r7, #14]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	89fb      	ldrh	r3, [r7, #14]
 80071ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	7b1b      	ldrb	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 809d 	bne.w	8007338 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d04c      	beq.n	80072a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	823b      	strh	r3, [r7, #16]
 8007214:	8a3b      	ldrh	r3, [r7, #16]
 8007216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01b      	beq.n	8007256 <USB_EPClearStall+0x6c>
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007234:	81fb      	strh	r3, [r7, #14]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	441a      	add	r2, r3
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800724a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800724e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007252:	b29b      	uxth	r3, r3
 8007254:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	78db      	ldrb	r3, [r3, #3]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d06c      	beq.n	8007338 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007274:	81bb      	strh	r3, [r7, #12]
 8007276:	89bb      	ldrh	r3, [r7, #12]
 8007278:	f083 0320 	eor.w	r3, r3, #32
 800727c:	81bb      	strh	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	89bb      	ldrh	r3, [r7, #12]
 800728a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800728e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800729a:	b29b      	uxth	r3, r3
 800729c:	8013      	strh	r3, [r2, #0]
 800729e:	e04b      	b.n	8007338 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	82fb      	strh	r3, [r7, #22]
 80072ae:	8afb      	ldrh	r3, [r7, #22]
 80072b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01b      	beq.n	80072f0 <USB_EPClearStall+0x106>
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ce:	82bb      	strh	r3, [r7, #20]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	8abb      	ldrh	r3, [r7, #20]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007306:	827b      	strh	r3, [r7, #18]
 8007308:	8a7b      	ldrh	r3, [r7, #18]
 800730a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800730e:	827b      	strh	r3, [r7, #18]
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007316:	827b      	strh	r3, [r7, #18]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	8a7b      	ldrh	r3, [r7, #18]
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2280      	movs	r2, #128	@ 0x80
 800735a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr

0800737e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr

08007392 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr

080073c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b08b      	sub	sp, #44	@ 0x2c
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	4611      	mov	r1, r2
 80073d2:	461a      	mov	r2, r3
 80073d4:	460b      	mov	r3, r1
 80073d6:	80fb      	strh	r3, [r7, #6]
 80073d8:	4613      	mov	r3, r2
 80073da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073dc:	88bb      	ldrh	r3, [r7, #4]
 80073de:	3301      	adds	r3, #1
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	005a      	lsls	r2, r3, #1
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80073fe:	e01e      	b.n	800743e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3301      	adds	r3, #1
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b21a      	sxth	r2, r3
 8007410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007414:	4313      	orrs	r3, r2
 8007416:	b21b      	sxth	r3, r3
 8007418:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	8a7a      	ldrh	r2, [r7, #18]
 800741e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	3302      	adds	r3, #2
 8007424:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	3302      	adds	r3, #2
 800742a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	3301      	adds	r3, #1
 8007436:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	3b01      	subs	r3, #1
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1dd      	bne.n	8007400 <USB_WritePMA+0x3a>
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	372c      	adds	r7, #44	@ 0x2c
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007450:	b480      	push	{r7}
 8007452:	b08b      	sub	sp, #44	@ 0x2c
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4611      	mov	r1, r2
 800745c:	461a      	mov	r2, r3
 800745e:	460b      	mov	r3, r1
 8007460:	80fb      	strh	r3, [r7, #6]
 8007462:	4613      	mov	r3, r2
 8007464:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007466:	88bb      	ldrh	r3, [r7, #4]
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	b29b      	uxth	r3, r3
 800746c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	005a      	lsls	r2, r3, #1
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007482:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
 8007488:	e01b      	b.n	80074c2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	3302      	adds	r3, #2
 8007496:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	3302      	adds	r3, #2
 80074ba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	3b01      	subs	r3, #1
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e0      	bne.n	800748a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80074c8:	88bb      	ldrh	r3, [r7, #4]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	701a      	strb	r2, [r3, #0]
  }
}
 80074e4:	bf00      	nop
 80074e6:	372c      	adds	r7, #44	@ 0x2c
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7c1b      	ldrb	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d115      	bne.n	8007532 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800750a:	2202      	movs	r2, #2
 800750c:	2181      	movs	r1, #129	@ 0x81
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fe81 	bl	8009216 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800751a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800751e:	2202      	movs	r2, #2
 8007520:	2101      	movs	r1, #1
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 fe77 	bl	8009216 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007530:	e012      	b.n	8007558 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007532:	2340      	movs	r3, #64	@ 0x40
 8007534:	2202      	movs	r2, #2
 8007536:	2181      	movs	r1, #129	@ 0x81
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fe6c 	bl	8009216 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007544:	2340      	movs	r3, #64	@ 0x40
 8007546:	2202      	movs	r2, #2
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fe63 	bl	8009216 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007558:	2308      	movs	r3, #8
 800755a:	2203      	movs	r2, #3
 800755c:	2182      	movs	r1, #130	@ 0x82
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fe59 	bl	8009216 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800756a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800756e:	f001 ff79 	bl	8009464 <USBD_static_malloc>
 8007572:	4602      	mov	r2, r0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
 8007588:	e026      	b.n	80075d8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007590:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c1b      	ldrb	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 ff19 	bl	80093f8 <USBD_LL_PrepareReceive>
 80075c6:	e007      	b.n	80075d8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ce:	2340      	movs	r3, #64	@ 0x40
 80075d0:	2101      	movs	r1, #1
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 ff10 	bl	80093f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075f2:	2181      	movs	r1, #129	@ 0x81
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe34 	bl	8009262 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007600:	2101      	movs	r1, #1
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fe2d 	bl	8009262 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007610:	2182      	movs	r1, #130	@ 0x82
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fe25 	bl	8009262 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007638:	4618      	mov	r0, r3
 800763a:	f001 ff1f 	bl	800947c <USBD_static_free>
    pdev->pClassData = NULL;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007660:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007676:	2b00      	cmp	r3, #0
 8007678:	d039      	beq.n	80076ee <USBD_CDC_Setup+0x9e>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d17f      	bne.n	800777e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d029      	beq.n	80076da <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b25b      	sxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	da11      	bge.n	80076b4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800769c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	88d2      	ldrh	r2, [r2, #6]
 80076a2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076a4:	6939      	ldr	r1, [r7, #16]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fa05 	bl	8008abc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80076b2:	e06b      	b.n	800778c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	785a      	ldrb	r2, [r3, #1]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076ca:	6939      	ldr	r1, [r7, #16]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	88db      	ldrh	r3, [r3, #6]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fa20 	bl	8008b18 <USBD_CtlPrepareRx>
      break;
 80076d8:	e058      	b.n	800778c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	7850      	ldrb	r0, [r2, #1]
 80076e6:	2200      	movs	r2, #0
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	4798      	blx	r3
      break;
 80076ec:	e04e      	b.n	800778c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	2b0b      	cmp	r3, #11
 80076f4:	d02e      	beq.n	8007754 <USBD_CDC_Setup+0x104>
 80076f6:	2b0b      	cmp	r3, #11
 80076f8:	dc38      	bgt.n	800776c <USBD_CDC_Setup+0x11c>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <USBD_CDC_Setup+0xb4>
 80076fe:	2b0a      	cmp	r3, #10
 8007700:	d014      	beq.n	800772c <USBD_CDC_Setup+0xdc>
 8007702:	e033      	b.n	800776c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800770a:	2b03      	cmp	r3, #3
 800770c:	d107      	bne.n	800771e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800770e:	f107 030c 	add.w	r3, r7, #12
 8007712:	2202      	movs	r2, #2
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f9d0 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800771c:	e02e      	b.n	800777c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 f961 	bl	80089e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007726:	2302      	movs	r3, #2
 8007728:	75fb      	strb	r3, [r7, #23]
          break;
 800772a:	e027      	b.n	800777c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007732:	2b03      	cmp	r3, #3
 8007734:	d107      	bne.n	8007746 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007736:	f107 030f 	add.w	r3, r7, #15
 800773a:	2201      	movs	r2, #1
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 f9bc 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007744:	e01a      	b.n	800777c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f94d 	bl	80089e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800774e:	2302      	movs	r3, #2
 8007750:	75fb      	strb	r3, [r7, #23]
          break;
 8007752:	e013      	b.n	800777c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775a:	2b03      	cmp	r3, #3
 800775c:	d00d      	beq.n	800777a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f941 	bl	80089e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007766:	2302      	movs	r3, #2
 8007768:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800776a:	e006      	b.n	800777a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 f93a 	bl	80089e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	75fb      	strb	r3, [r7, #23]
          break;
 8007778:	e000      	b.n	800777c <USBD_CDC_Setup+0x12c>
          break;
 800777a:	bf00      	nop
      }
      break;
 800777c:	e006      	b.n	800778c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 f931 	bl	80089e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007786:	2302      	movs	r3, #2
 8007788:	75fb      	strb	r3, [r7, #23]
      break;
 800778a:	bf00      	nop
  }

  return ret;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03a      	beq.n	8007832 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	331c      	adds	r3, #28
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d029      	beq.n	8007826 <USBD_CDC_DataIn+0x90>
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	331c      	adds	r3, #28
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	78f9      	ldrb	r1, [r7, #3]
 80077e6:	68b8      	ldr	r0, [r7, #8]
 80077e8:	460b      	mov	r3, r1
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4403      	add	r3, r0
 80077f2:	3338      	adds	r3, #56	@ 0x38
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	331c      	adds	r3, #28
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007818:	78f9      	ldrb	r1, [r7, #3]
 800781a:	2300      	movs	r3, #0
 800781c:	2200      	movs	r2, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fdc7 	bl	80093b2 <USBD_LL_Transmit>
 8007824:	e003      	b.n	800782e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	e000      	b.n	8007834 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007832:	2302      	movs	r3, #2
  }
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fdf2 	bl	800943e <USBD_LL_GetRxDataSize>
 800785a:	4602      	mov	r2, r0
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00d      	beq.n	8007888 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007880:	4611      	mov	r1, r2
 8007882:	4798      	blx	r3

    return USBD_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d014      	beq.n	80078d6 <USBD_CDC_EP0_RxReady+0x44>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80078b2:	2bff      	cmp	r3, #255	@ 0xff
 80078b4:	d00f      	beq.n	80078d6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80078c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	22ff      	movs	r2, #255	@ 0xff
 80078d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2243      	movs	r2, #67	@ 0x43
 80078ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078ee:	4b03      	ldr	r3, [pc, #12]	@ (80078fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	2000009c 	.word	0x2000009c

08007900 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2243      	movs	r2, #67	@ 0x43
 800790c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800790e:	4b03      	ldr	r3, [pc, #12]	@ (800791c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000058 	.word	0x20000058

08007920 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2243      	movs	r2, #67	@ 0x43
 800792c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	@ (800793c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	200000e0 	.word	0x200000e0

08007940 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	220a      	movs	r2, #10
 800794c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800794e:	4b03      	ldr	r3, [pc, #12]	@ (800795c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000014 	.word	0x20000014

08007960 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800796a:	2302      	movs	r3, #2
 800796c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr

080079e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01c      	beq.n	8007a38 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d115      	bne.n	8007a34 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2181      	movs	r1, #129	@ 0x81
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fcc1 	bl	80093b2 <USBD_LL_Transmit>

      return USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e002      	b.n	8007a3a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d017      	beq.n	8007a8c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7c1b      	ldrb	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a6e:	2101      	movs	r1, #1
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fcc1 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007a76:	e007      	b.n	8007a88 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a7e:	2340      	movs	r3, #64	@ 0x40
 8007a80:	2101      	movs	r1, #1
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fcb8 	bl	80093f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e000      	b.n	8007a8e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a8c:	2302      	movs	r3, #2
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e01a      	b.n	8007ae4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	79fa      	ldrb	r2, [r7, #7]
 8007ada:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fb25 	bl	800912c <USBD_LL_Init>

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d006      	beq.n	8007b0e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	e001      	b.n	8007b12 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr

08007b1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fb5a 	bl	80091e0 <USBD_LL_Start>

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bc80      	pop	{r7}
 8007b48:	4770      	bx	lr

08007b4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b56:	2302      	movs	r3, #2
 8007b58:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00c      	beq.n	8007b7e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	4798      	blx	r3

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fed8 	bl	8008976 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d016      	beq.n	8007c18 <USBD_LL_SetupStage+0x6a>
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d81c      	bhi.n	8007c28 <USBD_LL_SetupStage+0x7a>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <USBD_LL_SetupStage+0x4a>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d008      	beq.n	8007c08 <USBD_LL_SetupStage+0x5a>
 8007bf6:	e017      	b.n	8007c28 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f9cb 	bl	8007f9c <USBD_StdDevReq>
      break;
 8007c06:	e01a      	b.n	8007c3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa2d 	bl	8008070 <USBD_StdItfReq>
      break;
 8007c16:	e012      	b.n	8007c3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa6d 	bl	8008100 <USBD_StdEPReq>
      break;
 8007c26:	e00a      	b.n	8007c3e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fb32 	bl	80092a0 <USBD_LL_StallEP>
      break;
 8007c3c:	bf00      	nop
  }

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	460b      	mov	r3, r1
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d14b      	bne.n	8007cf4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d134      	bne.n	8007cd8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d919      	bls.n	8007cae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d203      	bcs.n	8007c9c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	e002      	b.n	8007ca2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 ff54 	bl	8008b54 <USBD_CtlContinueRx>
 8007cac:	e038      	b.n	8007d20 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d105      	bne.n	8007cd0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 ff51 	bl	8008b78 <USBD_CtlSendStatus>
 8007cd6:	e023      	b.n	8007d20 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	d11e      	bne.n	8007d20 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007cea:	2100      	movs	r1, #0
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f001 fad7 	bl	80092a0 <USBD_LL_StallEP>
 8007cf2:	e015      	b.n	8007d20 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d108      	bne.n	8007d1c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	7afa      	ldrb	r2, [r7, #11]
 8007d14:	4611      	mov	r1, r2
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	4798      	blx	r3
 8007d1a:	e001      	b.n	8007d20 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e000      	b.n	8007d22 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	460b      	mov	r3, r1
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d17f      	bne.n	8007e3e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3314      	adds	r3, #20
 8007d42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d15c      	bne.n	8007e08 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d915      	bls.n	8007d86 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	1ad2      	subs	r2, r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 febe 	bl	8008af4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f001 fb3a 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007d84:	e04e      	b.n	8007e24 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	6912      	ldr	r2, [r2, #16]
 8007d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d92:	fb01 f202 	mul.w	r2, r1, r2
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11c      	bne.n	8007dd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d316      	bcc.n	8007dd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d20f      	bcs.n	8007dd6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fe9a 	bl	8008af4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f001 fb12 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007dd4:	e026      	b.n	8007e24 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d105      	bne.n	8007df8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007df8:	2180      	movs	r1, #128	@ 0x80
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fa50 	bl	80092a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fecc 	bl	8008b9e <USBD_CtlReceiveStatus>
 8007e06:	e00d      	b.n	8007e24 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d004      	beq.n	8007e1c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d103      	bne.n	8007e24 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e1c:	2180      	movs	r1, #128	@ 0x80
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f001 fa3e 	bl	80092a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d11d      	bne.n	8007e6a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fe81 	bl	8007b36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e3c:	e015      	b.n	8007e6a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d108      	bne.n	8007e66 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	7afa      	ldrb	r2, [r7, #11]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	4798      	blx	r3
 8007e64:	e001      	b.n	8007e6a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e66:	2302      	movs	r3, #2
 8007e68:	e000      	b.n	8007e6c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e7c:	2340      	movs	r3, #64	@ 0x40
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 f9c7 	bl	8009216 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2240      	movs	r2, #64	@ 0x40
 8007e94:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e98:	2340      	movs	r3, #64	@ 0x40
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f9b9 	bl	8009216 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2240      	movs	r2, #64	@ 0x40
 8007eae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6852      	ldr	r2, [r2, #4]
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
  }

  return USBD_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d105      	bne.n	8007f5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d10b      	bne.n	8007f90 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fb2:	2b40      	cmp	r3, #64	@ 0x40
 8007fb4:	d005      	beq.n	8007fc2 <USBD_StdDevReq+0x26>
 8007fb6:	2b40      	cmp	r3, #64	@ 0x40
 8007fb8:	d84f      	bhi.n	800805a <USBD_StdDevReq+0xbe>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <USBD_StdDevReq+0x36>
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d14b      	bne.n	800805a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
      break;
 8007fd0:	e048      	b.n	8008064 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d839      	bhi.n	800804e <USBD_StdDevReq+0xb2>
 8007fda:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <USBD_StdDevReq+0x44>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008045 	.word	0x08008045
 8007fe8:	0800804f 	.word	0x0800804f
 8007fec:	0800803b 	.word	0x0800803b
 8007ff0:	0800804f 	.word	0x0800804f
 8007ff4:	08008013 	.word	0x08008013
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	0800804f 	.word	0x0800804f
 8008000:	08008027 	.word	0x08008027
 8008004:	0800801d 	.word	0x0800801d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9dc 	bl	80083c8 <USBD_GetDescriptor>
          break;
 8008010:	e022      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fb3f 	bl	8008698 <USBD_SetAddress>
          break;
 800801a:	e01d      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fb7e 	bl	8008720 <USBD_SetConfig>
          break;
 8008024:	e018      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fc07 	bl	800883c <USBD_GetConfig>
          break;
 800802e:	e013      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fc37 	bl	80088a6 <USBD_GetStatus>
          break;
 8008038:	e00e      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc65 	bl	800890c <USBD_SetFeature>
          break;
 8008042:	e009      	b.n	8008058 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fc74 	bl	8008934 <USBD_ClrFeature>
          break;
 800804c:	e004      	b.n	8008058 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fcc9 	bl	80089e8 <USBD_CtlError>
          break;
 8008056:	bf00      	nop
      }
      break;
 8008058:	e004      	b.n	8008064 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fcc3 	bl	80089e8 <USBD_CtlError>
      break;
 8008062:	bf00      	nop
  }

  return ret;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop

08008070 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008086:	2b40      	cmp	r3, #64	@ 0x40
 8008088:	d005      	beq.n	8008096 <USBD_StdItfReq+0x26>
 800808a:	2b40      	cmp	r3, #64	@ 0x40
 800808c:	d82e      	bhi.n	80080ec <USBD_StdItfReq+0x7c>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <USBD_StdItfReq+0x26>
 8008092:	2b20      	cmp	r3, #32
 8008094:	d12a      	bne.n	80080ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800809c:	3b01      	subs	r3, #1
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d81d      	bhi.n	80080de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d813      	bhi.n	80080d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d110      	bne.n	80080e8 <USBD_StdItfReq+0x78>
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10d      	bne.n	80080e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fd53 	bl	8008b78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080d2:	e009      	b.n	80080e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc86 	bl	80089e8 <USBD_CtlError>
          break;
 80080dc:	e004      	b.n	80080e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc81 	bl	80089e8 <USBD_CtlError>
          break;
 80080e6:	e000      	b.n	80080ea <USBD_StdItfReq+0x7a>
          break;
 80080e8:	bf00      	nop
      }
      break;
 80080ea:	e004      	b.n	80080f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc7a 	bl	80089e8 <USBD_CtlError>
      break;
 80080f4:	bf00      	nop
  }

  return USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	889b      	ldrh	r3, [r3, #4]
 8008112:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800811c:	2b40      	cmp	r3, #64	@ 0x40
 800811e:	d007      	beq.n	8008130 <USBD_StdEPReq+0x30>
 8008120:	2b40      	cmp	r3, #64	@ 0x40
 8008122:	f200 8146 	bhi.w	80083b2 <USBD_StdEPReq+0x2b2>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <USBD_StdEPReq+0x40>
 800812a:	2b20      	cmp	r3, #32
 800812c:	f040 8141 	bne.w	80083b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
      break;
 800813e:	e13d      	b.n	80083bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008148:	2b20      	cmp	r3, #32
 800814a:	d10a      	bne.n	8008162 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	e12d      	b.n	80083be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d007      	beq.n	800817a <USBD_StdEPReq+0x7a>
 800816a:	2b03      	cmp	r3, #3
 800816c:	f300 811b 	bgt.w	80083a6 <USBD_StdEPReq+0x2a6>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d072      	beq.n	800825a <USBD_StdEPReq+0x15a>
 8008174:	2b01      	cmp	r3, #1
 8008176:	d03a      	beq.n	80081ee <USBD_StdEPReq+0xee>
 8008178:	e115      	b.n	80083a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008180:	2b02      	cmp	r3, #2
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0x8a>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d015      	beq.n	80081b4 <USBD_StdEPReq+0xb4>
 8008188:	e02b      	b.n	80081e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <USBD_StdEPReq+0xaa>
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b80      	cmp	r3, #128	@ 0x80
 8008194:	d009      	beq.n	80081aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f880 	bl	80092a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081a0:	2180      	movs	r1, #128	@ 0x80
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f87c 	bl	80092a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a8:	e020      	b.n	80081ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc1b 	bl	80089e8 <USBD_CtlError>
              break;
 80081b2:	e01b      	b.n	80081ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10e      	bne.n	80081da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <USBD_StdEPReq+0xda>
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b80      	cmp	r3, #128	@ 0x80
 80081c6:	d008      	beq.n	80081da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	88db      	ldrh	r3, [r3, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f863 	bl	80092a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fccc 	bl	8008b78 <USBD_CtlSendStatus>

              break;
 80081e0:	e004      	b.n	80081ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fbff 	bl	80089e8 <USBD_CtlError>
              break;
 80081ea:	bf00      	nop
          }
          break;
 80081ec:	e0e0      	b.n	80083b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d002      	beq.n	80081fe <USBD_StdEPReq+0xfe>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d015      	beq.n	8008228 <USBD_StdEPReq+0x128>
 80081fc:	e026      	b.n	800824c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00c      	beq.n	800821e <USBD_StdEPReq+0x11e>
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b80      	cmp	r3, #128	@ 0x80
 8008208:	d009      	beq.n	800821e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 f846 	bl	80092a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008214:	2180      	movs	r1, #128	@ 0x80
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f842 	bl	80092a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800821c:	e01c      	b.n	8008258 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fbe1 	bl	80089e8 <USBD_CtlError>
              break;
 8008226:	e017      	b.n	8008258 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d112      	bne.n	8008256 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008236:	2b00      	cmp	r3, #0
 8008238:	d004      	beq.n	8008244 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f84d 	bl	80092de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fc97 	bl	8008b78 <USBD_CtlSendStatus>
              }
              break;
 800824a:	e004      	b.n	8008256 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fbca 	bl	80089e8 <USBD_CtlError>
              break;
 8008254:	e000      	b.n	8008258 <USBD_StdEPReq+0x158>
              break;
 8008256:	bf00      	nop
          }
          break;
 8008258:	e0aa      	b.n	80083b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008260:	2b02      	cmp	r3, #2
 8008262:	d002      	beq.n	800826a <USBD_StdEPReq+0x16a>
 8008264:	2b03      	cmp	r3, #3
 8008266:	d032      	beq.n	80082ce <USBD_StdEPReq+0x1ce>
 8008268:	e097      	b.n	800839a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <USBD_StdEPReq+0x180>
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b80      	cmp	r3, #128	@ 0x80
 8008274:	d004      	beq.n	8008280 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fbb5 	bl	80089e8 <USBD_CtlError>
                break;
 800827e:	e091      	b.n	80083a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008284:	2b00      	cmp	r3, #0
 8008286:	da0b      	bge.n	80082a0 <USBD_StdEPReq+0x1a0>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	3310      	adds	r3, #16
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	3304      	adds	r3, #4
 800829e:	e00b      	b.n	80082b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	3304      	adds	r3, #4
 80082b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2202      	movs	r2, #2
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fbf8 	bl	8008abc <USBD_CtlSendData>
              break;
 80082cc:	e06a      	b.n	80083a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da11      	bge.n	80082fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3318      	adds	r3, #24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d117      	bne.n	8008320 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fb78 	bl	80089e8 <USBD_CtlError>
                  break;
 80082f8:	e054      	b.n	80083a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fb65 	bl	80089e8 <USBD_CtlError>
                  break;
 800831e:	e041      	b.n	80083a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	da0b      	bge.n	8008340 <USBD_StdEPReq+0x240>
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	3310      	adds	r3, #16
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	e00b      	b.n	8008358 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	3304      	adds	r3, #4
 8008358:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <USBD_StdEPReq+0x266>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b80      	cmp	r3, #128	@ 0x80
 8008364:	d103      	bne.n	800836e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e00e      	b.n	800838c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 ffd2 	bl	800931c <USBD_LL_IsStallEP>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e002      	b.n	800838c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2202      	movs	r2, #2
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fb92 	bl	8008abc <USBD_CtlSendData>
              break;
 8008398:	e004      	b.n	80083a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb23 	bl	80089e8 <USBD_CtlError>
              break;
 80083a2:	bf00      	nop
          }
          break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fb1d 	bl	80089e8 <USBD_CtlError>
          break;
 80083ae:	bf00      	nop
      }
      break;
 80083b0:	e004      	b.n	80083bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fb17 	bl	80089e8 <USBD_CtlError>
      break;
 80083ba:	bf00      	nop
  }

  return ret;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	f200 8128 	bhi.w	800863e <USBD_GetDescriptor+0x276>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <USBD_GetDescriptor+0x2c>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008411 	.word	0x08008411
 80083f8:	08008429 	.word	0x08008429
 80083fc:	08008469 	.word	0x08008469
 8008400:	0800863f 	.word	0x0800863f
 8008404:	0800863f 	.word	0x0800863f
 8008408:	080085df 	.word	0x080085df
 800840c:	0800860b 	.word	0x0800860b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	7c12      	ldrb	r2, [r2, #16]
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	60f8      	str	r0, [r7, #12]
      break;
 8008426:	e112      	b.n	800864e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7c1b      	ldrb	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10d      	bne.n	800844c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008438:	f107 0208 	add.w	r2, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	2202      	movs	r2, #2
 8008448:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800844a:	e100      	b.n	800864e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	f107 0208 	add.w	r2, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	2202      	movs	r2, #2
 8008464:	701a      	strb	r2, [r3, #0]
      break;
 8008466:	e0f2      	b.n	800864e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b05      	cmp	r3, #5
 8008470:	f200 80ac 	bhi.w	80085cc <USBD_GetDescriptor+0x204>
 8008474:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <USBD_GetDescriptor+0xb4>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	08008495 	.word	0x08008495
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084fd 	.word	0x080084fd
 8008488:	08008531 	.word	0x08008531
 800848c:	08008565 	.word	0x08008565
 8008490:	08008599 	.word	0x08008599
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b6:	e091      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa94 	bl	80089e8 <USBD_CtlError>
            err++;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	3301      	adds	r3, #1
 80084c4:	72fb      	strb	r3, [r7, #11]
          break;
 80084c6:	e089      	b.n	80085dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e077      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa7a 	bl	80089e8 <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e06f      	b.n	80085dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e05d      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa60 	bl	80089e8 <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e055      	b.n	80085dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e043      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa46 	bl	80089e8 <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e03b      	b.n	80085dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	7c12      	ldrb	r2, [r2, #16]
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008586:	e029      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa2c 	bl	80089e8 <USBD_CtlError>
            err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
          break;
 8008596:	e021      	b.n	80085dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ba:	e00f      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa12 	bl	80089e8 <USBD_CtlError>
            err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ca:	e007      	b.n	80085dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa0a 	bl	80089e8 <USBD_CtlError>
          err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085da:	e038      	b.n	800864e <USBD_GetDescriptor+0x286>
 80085dc:	e037      	b.n	800864e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	7c1b      	ldrb	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ee:	f107 0208 	add.w	r2, r7, #8
 80085f2:	4610      	mov	r0, r2
 80085f4:	4798      	blx	r3
 80085f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085f8:	e029      	b.n	800864e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f9f3 	bl	80089e8 <USBD_CtlError>
        err++;
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	3301      	adds	r3, #1
 8008606:	72fb      	strb	r3, [r7, #11]
      break;
 8008608:	e021      	b.n	800864e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7c1b      	ldrb	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10d      	bne.n	800862e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	4610      	mov	r0, r2
 8008620:	4798      	blx	r3
 8008622:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	2207      	movs	r2, #7
 800862a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800862c:	e00f      	b.n	800864e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f9d9 	bl	80089e8 <USBD_CtlError>
        err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	e007      	b.n	800864e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9d1 	bl	80089e8 <USBD_CtlError>
      err++;
 8008646:	7afb      	ldrb	r3, [r7, #11]
 8008648:	3301      	adds	r3, #1
 800864a:	72fb      	strb	r3, [r7, #11]
      break;
 800864c:	bf00      	nop
  }

  if (err != 0U)
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d11c      	bne.n	800868e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008654:	893b      	ldrh	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d011      	beq.n	800867e <USBD_GetDescriptor+0x2b6>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	88db      	ldrh	r3, [r3, #6]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	88da      	ldrh	r2, [r3, #6]
 8008666:	893b      	ldrh	r3, [r7, #8]
 8008668:	4293      	cmp	r3, r2
 800866a:	bf28      	it	cs
 800866c:	4613      	movcs	r3, r2
 800866e:	b29b      	uxth	r3, r3
 8008670:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008672:	893b      	ldrh	r3, [r7, #8]
 8008674:	461a      	mov	r2, r3
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa1f 	bl	8008abc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d104      	bne.n	8008690 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa76 	bl	8008b78 <USBD_CtlSendStatus>
 800868c:	e000      	b.n	8008690 <USBD_GetDescriptor+0x2c8>
    return;
 800868e:	bf00      	nop
    }
  }
}
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop

08008698 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	889b      	ldrh	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d130      	bne.n	800870c <USBD_SetAddress+0x74>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	88db      	ldrh	r3, [r3, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d12c      	bne.n	800870c <USBD_SetAddress+0x74>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80086b8:	d828      	bhi.n	800870c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d104      	bne.n	80086da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f988 	bl	80089e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d8:	e01d      	b.n	8008716 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7bfa      	ldrb	r2, [r7, #15]
 80086de:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fe44 	bl	8009374 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa43 	bl	8008b78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008700:	e009      	b.n	8008716 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	e004      	b.n	8008716 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f96a 	bl	80089e8 <USBD_CtlError>
  }
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	4b41      	ldr	r3, [pc, #260]	@ (8008838 <USBD_SetConfig+0x118>)
 8008732:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008734:	4b40      	ldr	r3, [pc, #256]	@ (8008838 <USBD_SetConfig+0x118>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d904      	bls.n	8008746 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f952 	bl	80089e8 <USBD_CtlError>
 8008744:	e075      	b.n	8008832 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874c:	2b02      	cmp	r3, #2
 800874e:	d002      	beq.n	8008756 <USBD_SetConfig+0x36>
 8008750:	2b03      	cmp	r3, #3
 8008752:	d023      	beq.n	800879c <USBD_SetConfig+0x7c>
 8008754:	e062      	b.n	800881c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008756:	4b38      	ldr	r3, [pc, #224]	@ (8008838 <USBD_SetConfig+0x118>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d01a      	beq.n	8008794 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800875e:	4b36      	ldr	r3, [pc, #216]	@ (8008838 <USBD_SetConfig+0x118>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2203      	movs	r2, #3
 800876c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008770:	4b31      	ldr	r3, [pc, #196]	@ (8008838 <USBD_SetConfig+0x118>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f9e7 	bl	8007b4a <USBD_SetClassConfig>
 800877c:	4603      	mov	r3, r0
 800877e:	2b02      	cmp	r3, #2
 8008780:	d104      	bne.n	800878c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f92f 	bl	80089e8 <USBD_CtlError>
            return;
 800878a:	e052      	b.n	8008832 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9f3 	bl	8008b78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008792:	e04e      	b.n	8008832 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9ef 	bl	8008b78 <USBD_CtlSendStatus>
        break;
 800879a:	e04a      	b.n	8008832 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800879c:	4b26      	ldr	r3, [pc, #152]	@ (8008838 <USBD_SetConfig+0x118>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d112      	bne.n	80087ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80087ac:	4b22      	ldr	r3, [pc, #136]	@ (8008838 <USBD_SetConfig+0x118>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087b6:	4b20      	ldr	r3, [pc, #128]	@ (8008838 <USBD_SetConfig+0x118>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff f9e3 	bl	8007b88 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9d8 	bl	8008b78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c8:	e033      	b.n	8008832 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008838 <USBD_SetConfig+0x118>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d01d      	beq.n	8008814 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff f9d1 	bl	8007b88 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087e6:	4b14      	ldr	r3, [pc, #80]	@ (8008838 <USBD_SetConfig+0x118>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087f0:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <USBD_SetConfig+0x118>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f9a7 	bl	8007b4a <USBD_SetClassConfig>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d104      	bne.n	800880c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f8ef 	bl	80089e8 <USBD_CtlError>
            return;
 800880a:	e012      	b.n	8008832 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f9b3 	bl	8008b78 <USBD_CtlSendStatus>
        break;
 8008812:	e00e      	b.n	8008832 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9af 	bl	8008b78 <USBD_CtlSendStatus>
        break;
 800881a:	e00a      	b.n	8008832 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f8e2 	bl	80089e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008824:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <USBD_SetConfig+0x118>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f9ac 	bl	8007b88 <USBD_ClrClassConfig>
        break;
 8008830:	bf00      	nop
    }
  }
}
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	2000029c 	.word	0x2000029c

0800883c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	88db      	ldrh	r3, [r3, #6]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d004      	beq.n	8008858 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f8c9 	bl	80089e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008856:	e022      	b.n	800889e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800885e:	2b02      	cmp	r3, #2
 8008860:	dc02      	bgt.n	8008868 <USBD_GetConfig+0x2c>
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc03      	bgt.n	800886e <USBD_GetConfig+0x32>
 8008866:	e015      	b.n	8008894 <USBD_GetConfig+0x58>
 8008868:	2b03      	cmp	r3, #3
 800886a:	d00b      	beq.n	8008884 <USBD_GetConfig+0x48>
 800886c:	e012      	b.n	8008894 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3308      	adds	r3, #8
 8008878:	2201      	movs	r2, #1
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f91d 	bl	8008abc <USBD_CtlSendData>
        break;
 8008882:	e00c      	b.n	800889e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	2201      	movs	r2, #1
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f915 	bl	8008abc <USBD_CtlSendData>
        break;
 8008892:	e004      	b.n	800889e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f8a6 	bl	80089e8 <USBD_CtlError>
        break;
 800889c:	bf00      	nop
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d81e      	bhi.n	80088fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	88db      	ldrh	r3, [r3, #6]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d004      	beq.n	80088ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f88e 	bl	80089e8 <USBD_CtlError>
        break;
 80088cc:	e01a      	b.n	8008904 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f043 0202 	orr.w	r2, r3, #2
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	330c      	adds	r3, #12
 80088ee:	2202      	movs	r2, #2
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f8e2 	bl	8008abc <USBD_CtlSendData>
      break;
 80088f8:	e004      	b.n	8008904 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f873 	bl	80089e8 <USBD_CtlError>
      break;
 8008902:	bf00      	nop
  }
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d106      	bne.n	800892c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f926 	bl	8008b78 <USBD_CtlSendStatus>
  }
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008944:	3b01      	subs	r3, #1
 8008946:	2b02      	cmp	r3, #2
 8008948:	d80b      	bhi.n	8008962 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d10c      	bne.n	800896c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f90c 	bl	8008b78 <USBD_CtlSendStatus>
      }
      break;
 8008960:	e004      	b.n	800896c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f83f 	bl	80089e8 <USBD_CtlError>
      break;
 800896a:	e000      	b.n	800896e <USBD_ClrFeature+0x3a>
      break;
 800896c:	bf00      	nop
  }
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	785a      	ldrb	r2, [r3, #1]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	3302      	adds	r3, #2
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	3303      	adds	r3, #3
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3305      	adds	r3, #5
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4413      	add	r3, r2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3306      	adds	r3, #6
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	3307      	adds	r3, #7
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	80da      	strh	r2, [r3, #6]

}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr

080089e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089f2:	2180      	movs	r1, #128	@ 0x80
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fc53 	bl	80092a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089fa:	2100      	movs	r1, #0
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc4f 	bl	80092a0 <USBD_LL_StallEP>
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b086      	sub	sp, #24
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d032      	beq.n	8008a86 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 f834 	bl	8008a8e <USBD_GetLen>
 8008a26:	4603      	mov	r3, r0
 8008a28:	3301      	adds	r3, #1
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	75fa      	strb	r2, [r7, #23]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4413      	add	r3, r2
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	75fa      	strb	r2, [r7, #23]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	2203      	movs	r2, #3
 8008a54:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a56:	e012      	b.n	8008a7e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	60fa      	str	r2, [r7, #12]
 8008a5e:	7dfa      	ldrb	r2, [r7, #23]
 8008a60:	1c51      	adds	r1, r2, #1
 8008a62:	75f9      	strb	r1, [r7, #23]
 8008a64:	4611      	mov	r1, r2
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	440a      	add	r2, r1
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	75fa      	strb	r2, [r7, #23]
 8008a74:	461a      	mov	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e8      	bne.n	8008a58 <USBD_GetString+0x4e>
    }
  }
}
 8008a86:	bf00      	nop
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a9a:	e005      	b.n	8008aa8 <USBD_GetLen+0x1a>
  {
    len++;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f5      	bne.n	8008a9c <USBD_GetLen+0xe>
  }

  return len;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fc64 	bl	80093b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fc52 	bl	80093b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b2e:	88fa      	ldrh	r2, [r7, #6]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	2100      	movs	r1, #0
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fc57 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b62:	88fb      	ldrh	r3, [r7, #6]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	2100      	movs	r1, #0
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fc45 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2204      	movs	r2, #4
 8008b84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fc0f 	bl	80093b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2205      	movs	r2, #5
 8008baa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc1f 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4912      	ldr	r1, [pc, #72]	@ (8008c14 <MX_USB_DEVICE_Init+0x50>)
 8008bcc:	4812      	ldr	r0, [pc, #72]	@ (8008c18 <MX_USB_DEVICE_Init+0x54>)
 8008bce:	f7fe ff62 	bl	8007a96 <USBD_Init>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bd8:	f7f8 fa49 	bl	800106e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bdc:	490f      	ldr	r1, [pc, #60]	@ (8008c1c <MX_USB_DEVICE_Init+0x58>)
 8008bde:	480e      	ldr	r0, [pc, #56]	@ (8008c18 <MX_USB_DEVICE_Init+0x54>)
 8008be0:	f7fe ff84 	bl	8007aec <USBD_RegisterClass>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bea:	f7f8 fa40 	bl	800106e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bee:	490c      	ldr	r1, [pc, #48]	@ (8008c20 <MX_USB_DEVICE_Init+0x5c>)
 8008bf0:	4809      	ldr	r0, [pc, #36]	@ (8008c18 <MX_USB_DEVICE_Init+0x54>)
 8008bf2:	f7fe feb5 	bl	8007960 <USBD_CDC_RegisterInterface>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bfc:	f7f8 fa37 	bl	800106e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c00:	4805      	ldr	r0, [pc, #20]	@ (8008c18 <MX_USB_DEVICE_Init+0x54>)
 8008c02:	f7fe ff8c 	bl	8007b1e <USBD_Start>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c0c:	f7f8 fa2f 	bl	800106e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c10:	bf00      	nop
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000134 	.word	0x20000134
 8008c18:	200002a0 	.word	0x200002a0
 8008c1c:	20000020 	.word	0x20000020
 8008c20:	20000124 	.word	0x20000124

08008c24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4905      	ldr	r1, [pc, #20]	@ (8008c40 <CDC_Init_FS+0x1c>)
 8008c2c:	4805      	ldr	r0, [pc, #20]	@ (8008c44 <CDC_Init_FS+0x20>)
 8008c2e:	f7fe fead 	bl	800798c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c32:	4905      	ldr	r1, [pc, #20]	@ (8008c48 <CDC_Init_FS+0x24>)
 8008c34:	4803      	ldr	r0, [pc, #12]	@ (8008c44 <CDC_Init_FS+0x20>)
 8008c36:	f7fe fec2 	bl	80079be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000964 	.word	0x20000964
 8008c44:	200002a0 	.word	0x200002a0
 8008c48:	20000564 	.word	0x20000564

08008c4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr
	...

08008c5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	71fb      	strb	r3, [r7, #7]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2b23      	cmp	r3, #35	@ 0x23
 8008c70:	d84a      	bhi.n	8008d08 <CDC_Control_FS+0xac>
 8008c72:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <CDC_Control_FS+0x1c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008d09 	.word	0x08008d09
 8008c7c:	08008d09 	.word	0x08008d09
 8008c80:	08008d09 	.word	0x08008d09
 8008c84:	08008d09 	.word	0x08008d09
 8008c88:	08008d09 	.word	0x08008d09
 8008c8c:	08008d09 	.word	0x08008d09
 8008c90:	08008d09 	.word	0x08008d09
 8008c94:	08008d09 	.word	0x08008d09
 8008c98:	08008d09 	.word	0x08008d09
 8008c9c:	08008d09 	.word	0x08008d09
 8008ca0:	08008d09 	.word	0x08008d09
 8008ca4:	08008d09 	.word	0x08008d09
 8008ca8:	08008d09 	.word	0x08008d09
 8008cac:	08008d09 	.word	0x08008d09
 8008cb0:	08008d09 	.word	0x08008d09
 8008cb4:	08008d09 	.word	0x08008d09
 8008cb8:	08008d09 	.word	0x08008d09
 8008cbc:	08008d09 	.word	0x08008d09
 8008cc0:	08008d09 	.word	0x08008d09
 8008cc4:	08008d09 	.word	0x08008d09
 8008cc8:	08008d09 	.word	0x08008d09
 8008ccc:	08008d09 	.word	0x08008d09
 8008cd0:	08008d09 	.word	0x08008d09
 8008cd4:	08008d09 	.word	0x08008d09
 8008cd8:	08008d09 	.word	0x08008d09
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008d09 	.word	0x08008d09
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d09 	.word	0x08008d09
 8008d00:	08008d09 	.word	0x08008d09
 8008d04:	08008d09 	.word	0x08008d09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d08:	bf00      	nop
  }

  return (USBD_OK);
 8008d0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop

08008d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4805      	ldr	r0, [pc, #20]	@ (8008d3c <CDC_Receive_FS+0x24>)
 8008d26:	f7fe fe4a 	bl	80079be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d2a:	4804      	ldr	r0, [pc, #16]	@ (8008d3c <CDC_Receive_FS+0x24>)
 8008d2c:	f7fe fe89 	bl	8007a42 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200002a0 	.word	0x200002a0

08008d40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d50:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <CDC_Transmit_FS+0x48>)
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e00b      	b.n	8008d7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d66:	887b      	ldrh	r3, [r7, #2]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4806      	ldr	r0, [pc, #24]	@ (8008d88 <CDC_Transmit_FS+0x48>)
 8008d6e:	f7fe fe0d 	bl	800798c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d72:	4805      	ldr	r0, [pc, #20]	@ (8008d88 <CDC_Transmit_FS+0x48>)
 8008d74:	f7fe fe36 	bl	80079e4 <USBD_CDC_TransmitPacket>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	200002a0 	.word	0x200002a0

08008d8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2212      	movs	r2, #18
 8008d9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d9e:	4b03      	ldr	r3, [pc, #12]	@ (8008dac <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000150 	.word	0x20000150

08008db0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dc2:	4b03      	ldr	r3, [pc, #12]	@ (8008dd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000164 	.word	0x20000164

08008dd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4907      	ldr	r1, [pc, #28]	@ (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dea:	4808      	ldr	r0, [pc, #32]	@ (8008e0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008dec:	f7ff fe0d 	bl	8008a0a <USBD_GetString>
 8008df0:	e004      	b.n	8008dfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4904      	ldr	r1, [pc, #16]	@ (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df6:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008df8:	f7ff fe07 	bl	8008a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dfc:	4b02      	ldr	r3, [pc, #8]	@ (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000d64 	.word	0x20000d64
 8008e0c:	08009774 	.word	0x08009774

08008e10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	4904      	ldr	r1, [pc, #16]	@ (8008e30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e20:	4804      	ldr	r0, [pc, #16]	@ (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e22:	f7ff fdf2 	bl	8008a0a <USBD_GetString>
  return USBD_StrDesc;
 8008e26:	4b02      	ldr	r3, [pc, #8]	@ (8008e30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000d64 	.word	0x20000d64
 8008e34:	0800978c 	.word	0x0800978c

08008e38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	221a      	movs	r2, #26
 8008e48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e4a:	f000 f843 	bl	8008ed4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e4e:	4b02      	ldr	r3, [pc, #8]	@ (8008e58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20000168 	.word	0x20000168

08008e5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4907      	ldr	r1, [pc, #28]	@ (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e72:	4808      	ldr	r0, [pc, #32]	@ (8008e94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e74:	f7ff fdc9 	bl	8008a0a <USBD_GetString>
 8008e78:	e004      	b.n	8008e84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4904      	ldr	r1, [pc, #16]	@ (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7e:	4805      	ldr	r0, [pc, #20]	@ (8008e94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e80:	f7ff fdc3 	bl	8008a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000d64 	.word	0x20000d64
 8008e94:	080097a0 	.word	0x080097a0

08008e98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4907      	ldr	r1, [pc, #28]	@ (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eae:	4808      	ldr	r0, [pc, #32]	@ (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb0:	f7ff fdab 	bl	8008a0a <USBD_GetString>
 8008eb4:	e004      	b.n	8008ec0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	4904      	ldr	r1, [pc, #16]	@ (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eba:	4805      	ldr	r0, [pc, #20]	@ (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ebc:	f7ff fda5 	bl	8008a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	@ (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000d64 	.word	0x20000d64
 8008ed0:	080097ac 	.word	0x080097ac

08008ed4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008eda:	4b0f      	ldr	r3, [pc, #60]	@ (8008f18 <Get_SerialNum+0x44>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8008f1c <Get_SerialNum+0x48>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f20 <Get_SerialNum+0x4c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008efa:	2208      	movs	r2, #8
 8008efc:	4909      	ldr	r1, [pc, #36]	@ (8008f24 <Get_SerialNum+0x50>)
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 f814 	bl	8008f2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f04:	2204      	movs	r2, #4
 8008f06:	4908      	ldr	r1, [pc, #32]	@ (8008f28 <Get_SerialNum+0x54>)
 8008f08:	68b8      	ldr	r0, [r7, #8]
 8008f0a:	f000 f80f 	bl	8008f2c <IntToUnicode>
  }
}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	1ffff7e8 	.word	0x1ffff7e8
 8008f1c:	1ffff7ec 	.word	0x1ffff7ec
 8008f20:	1ffff7f0 	.word	0x1ffff7f0
 8008f24:	2000016a 	.word	0x2000016a
 8008f28:	2000017a 	.word	0x2000017a

08008f2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
 8008f42:	e027      	b.n	8008f94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	0f1b      	lsrs	r3, r3, #28
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	d80b      	bhi.n	8008f64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4619      	mov	r1, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	3230      	adds	r2, #48	@ 0x30
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e00a      	b.n	8008f7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	0f1b      	lsrs	r3, r3, #28
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	440b      	add	r3, r1
 8008f74:	3237      	adds	r2, #55	@ 0x37
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	3301      	adds	r3, #1
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	3301      	adds	r3, #1
 8008f92:	75fb      	strb	r3, [r7, #23]
 8008f94:	7dfa      	ldrb	r2, [r7, #23]
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d3d3      	bcc.n	8008f44 <IntToUnicode+0x18>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8008fec <HAL_PCD_MspInit+0x44>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d113      	bne.n	8008fe2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <HAL_PCD_MspInit+0x48>)
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff0 <HAL_PCD_MspInit+0x48>)
 8008fc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fc4:	61d3      	str	r3, [r2, #28]
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <HAL_PCD_MspInit+0x48>)
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	2014      	movs	r0, #20
 8008fd8:	f7f8 faed 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fdc:	2014      	movs	r0, #20
 8008fde:	f7f8 fb06 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40005c00 	.word	0x40005c00
 8008ff0:	40021000 	.word	0x40021000

08008ff4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7fe fdcf 	bl	8007bae <USBD_LL_SetupStage>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	440b      	add	r3, r1
 8009038:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	4619      	mov	r1, r3
 8009042:	f7fe fe01 	bl	8007c48 <USBD_LL_DataOutStage>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	440b      	add	r3, r1
 800906e:	333c      	adds	r3, #60	@ 0x3c
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	4619      	mov	r1, r3
 8009076:	f7fe fe58 	bl	8007d2a <USBD_LL_DataInStage>
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe ff68 	bl	8007f66 <USBD_LL_SOF>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090a6:	2301      	movs	r3, #1
 80090a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d001      	beq.n	80090b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090b2:	f7f7 ffdc 	bl	800106e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80090bc:	7bfa      	ldrb	r2, [r7, #15]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe ff18 	bl	8007ef6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fed1 	bl	8007e74 <USBD_LL_Reset>
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe ff12 	bl	8007f14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090f8:	4b04      	ldr	r3, [pc, #16]	@ (800910c <HAL_PCD_SuspendCallback+0x30>)
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	4a03      	ldr	r2, [pc, #12]	@ (800910c <HAL_PCD_SuspendCallback+0x30>)
 80090fe:	f043 0306 	orr.w	r3, r3, #6
 8009102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	e000ed00 	.word	0xe000ed00

08009110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe ff0c 	bl	8007f3c <USBD_LL_Resume>
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009134:	4a28      	ldr	r2, [pc, #160]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a26      	ldr	r2, [pc, #152]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009140:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009144:	4b24      	ldr	r3, [pc, #144]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009146:	4a25      	ldr	r2, [pc, #148]	@ (80091dc <USBD_LL_Init+0xb0>)
 8009148:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800914a:	4b23      	ldr	r3, [pc, #140]	@ (80091d8 <USBD_LL_Init+0xac>)
 800914c:	2208      	movs	r2, #8
 800914e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009150:	4b21      	ldr	r3, [pc, #132]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009152:	2202      	movs	r2, #2
 8009154:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009156:	4b20      	ldr	r3, [pc, #128]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009158:	2200      	movs	r2, #0
 800915a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800915c:	4b1e      	ldr	r3, [pc, #120]	@ (80091d8 <USBD_LL_Init+0xac>)
 800915e:	2200      	movs	r2, #0
 8009160:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009162:	4b1d      	ldr	r3, [pc, #116]	@ (80091d8 <USBD_LL_Init+0xac>)
 8009164:	2200      	movs	r2, #0
 8009166:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009168:	481b      	ldr	r0, [pc, #108]	@ (80091d8 <USBD_LL_Init+0xac>)
 800916a:	f7f8 fcf1 	bl	8001b50 <HAL_PCD_Init>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009174:	f7f7 ff7b 	bl	800106e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800917e:	2318      	movs	r3, #24
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	f7fa fa0f 	bl	80035a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800918e:	2358      	movs	r3, #88	@ 0x58
 8009190:	2200      	movs	r2, #0
 8009192:	2180      	movs	r1, #128	@ 0x80
 8009194:	f7fa fa07 	bl	80035a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800919e:	23c0      	movs	r3, #192	@ 0xc0
 80091a0:	2200      	movs	r2, #0
 80091a2:	2181      	movs	r1, #129	@ 0x81
 80091a4:	f7fa f9ff 	bl	80035a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80091b2:	2200      	movs	r2, #0
 80091b4:	2101      	movs	r1, #1
 80091b6:	f7fa f9f6 	bl	80035a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091c4:	2200      	movs	r2, #0
 80091c6:	2182      	movs	r1, #130	@ 0x82
 80091c8:	f7fa f9ed 	bl	80035a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000f64 	.word	0x20000f64
 80091dc:	40005c00 	.word	0x40005c00

080091e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f8 fda9 	bl	8001d4e <HAL_PCD_Start>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f94e 	bl	80094a4 <USBD_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	461a      	mov	r2, r3
 8009224:	4603      	mov	r3, r0
 8009226:	70fb      	strb	r3, [r7, #3]
 8009228:	460b      	mov	r3, r1
 800922a:	70bb      	strb	r3, [r7, #2]
 800922c:	4613      	mov	r3, r2
 800922e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800923e:	78bb      	ldrb	r3, [r7, #2]
 8009240:	883a      	ldrh	r2, [r7, #0]
 8009242:	78f9      	ldrb	r1, [r7, #3]
 8009244:	f7f8 fefe 	bl	8002044 <HAL_PCD_EP_Open>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 f928 	bl	80094a4 <USBD_Get_USB_Status>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009258:	7bbb      	ldrb	r3, [r7, #14]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f7f8 ff3c 	bl	80020fe <HAL_PCD_EP_Close>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f909 	bl	80094a4 <USBD_Get_USB_Status>
 8009292:	4603      	mov	r3, r0
 8009294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009296:	7bbb      	ldrb	r3, [r7, #14]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f7f8 ffe4 	bl	800228c <HAL_PCD_EP_SetStall>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f8ea 	bl	80094a4 <USBD_Get_USB_Status>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f9 f825 	bl	800234c <HAL_PCD_EP_ClrStall>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f8cb 	bl	80094a4 <USBD_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009312:	7bbb      	ldrb	r3, [r7, #14]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800932e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009334:	2b00      	cmp	r3, #0
 8009336:	da0c      	bge.n	8009352 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	440b      	add	r3, r1
 800934c:	3302      	adds	r3, #2
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	e00b      	b.n	800936a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009358:	68f9      	ldr	r1, [r7, #12]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	440b      	add	r3, r1
 8009364:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009368:	781b      	ldrb	r3, [r3, #0]
  }
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr

08009374 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	4611      	mov	r1, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f7f8 fe31 	bl	8001ffa <HAL_PCD_SetAddress>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f880 	bl	80094a4 <USBD_Get_USB_Status>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	461a      	mov	r2, r3
 80093be:	460b      	mov	r3, r1
 80093c0:	72fb      	strb	r3, [r7, #11]
 80093c2:	4613      	mov	r3, r2
 80093c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80093d4:	893b      	ldrh	r3, [r7, #8]
 80093d6:	7af9      	ldrb	r1, [r7, #11]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f7f8 ff20 	bl	800221e <HAL_PCD_EP_Transmit>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f85d 	bl	80094a4 <USBD_Get_USB_Status>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	461a      	mov	r2, r3
 8009404:	460b      	mov	r3, r1
 8009406:	72fb      	strb	r3, [r7, #11]
 8009408:	4613      	mov	r3, r2
 800940a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	7af9      	ldrb	r1, [r7, #11]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	f7f8 feb5 	bl	800218e <HAL_PCD_EP_Receive>
 8009424:	4603      	mov	r3, r0
 8009426:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f83a 	bl	80094a4 <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009434:	7dbb      	ldrb	r3, [r7, #22]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7f8 fecb 	bl	80021f0 <HAL_PCD_EP_GetRxCount>
 800945a:	4603      	mov	r3, r0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800946c:	4b02      	ldr	r3, [pc, #8]	@ (8009478 <USBD_static_malloc+0x14>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr
 8009478:	20001254 	.word	0x20001254

0800947c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr

0800948e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr

080094a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d817      	bhi.n	80094e8 <USBD_Get_USB_Status+0x44>
 80094b8:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <USBD_Get_USB_Status+0x1c>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	080094d1 	.word	0x080094d1
 80094c4:	080094d7 	.word	0x080094d7
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	080094e3 	.word	0x080094e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
    break;
 80094d4:	e00b      	b.n	80094ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094d6:	2302      	movs	r3, #2
 80094d8:	73fb      	strb	r3, [r7, #15]
    break;
 80094da:	e008      	b.n	80094ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094dc:	2301      	movs	r3, #1
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	e005      	b.n	80094ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094e2:	2302      	movs	r3, #2
 80094e4:	73fb      	strb	r3, [r7, #15]
    break;
 80094e6:	e002      	b.n	80094ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094e8:	2302      	movs	r3, #2
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	bf00      	nop
  }
  return usb_status;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bc80      	pop	{r7}
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop

080094fc <memset>:
 80094fc:	4603      	mov	r3, r0
 80094fe:	4402      	add	r2, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	2600      	movs	r6, #0
 8009510:	4d0c      	ldr	r5, [pc, #48]	@ (8009544 <__libc_init_array+0x38>)
 8009512:	4c0d      	ldr	r4, [pc, #52]	@ (8009548 <__libc_init_array+0x3c>)
 8009514:	1b64      	subs	r4, r4, r5
 8009516:	10a4      	asrs	r4, r4, #2
 8009518:	42a6      	cmp	r6, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	f000 f81a 	bl	8009554 <_init>
 8009520:	2600      	movs	r6, #0
 8009522:	4d0a      	ldr	r5, [pc, #40]	@ (800954c <__libc_init_array+0x40>)
 8009524:	4c0a      	ldr	r4, [pc, #40]	@ (8009550 <__libc_init_array+0x44>)
 8009526:	1b64      	subs	r4, r4, r5
 8009528:	10a4      	asrs	r4, r4, #2
 800952a:	42a6      	cmp	r6, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f855 3b04 	ldr.w	r3, [r5], #4
 8009534:	4798      	blx	r3
 8009536:	3601      	adds	r6, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f855 3b04 	ldr.w	r3, [r5], #4
 800953e:	4798      	blx	r3
 8009540:	3601      	adds	r6, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	080097f0 	.word	0x080097f0
 8009548:	080097f0 	.word	0x080097f0
 800954c:	080097f0 	.word	0x080097f0
 8009550:	080097f4 	.word	0x080097f4

08009554 <_init>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	bf00      	nop
 8009558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955a:	bc08      	pop	{r3}
 800955c:	469e      	mov	lr, r3
 800955e:	4770      	bx	lr

08009560 <_fini>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr
